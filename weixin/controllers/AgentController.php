<?php
namespace app\controllers;
use app\api\AddressApi;
use app\api\AgentApi;
use app\api\BrandGoodsApi;
use app\api\CheckVcodeApi;
use yii;
use app\api\AgentLoginApi;
use app\api\AgentGetDevFactoryApi;
use app\api\AgentRegistApi;
use app\api\SmsSendApi;
/**
 * Created by PhpStorm.
 * User: pengjixiang
 * Date: 17/3/17
 * Time: 下午2:11
 */
class AgentController extends WxController
{
    public function beforeAction($action)
    {
        $this->checkOpenid();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    /**
     * 登录
     * @return string
     */
    public function actionLoginPage()
    {
      return $this->renderPartial("login");
    }
    /**
     * 首页
     * @return string|yii\web\Responses
     */
    public function actionIndex(){
         if(!$this->checkAgentLogin()){
             //未登录
             yii::$app->session->set("last_url","/agent/index");
              return $this->redirect(["/agent/login-page"]);
         }
        $agent=Yii::$app->session->get("agent_user");
//        $data=(new AgentApi())->getUserStat();
        $UserInfo='';
        if($agent&&property_exists($agent,'key')){
            //获取登陆者信息
            $UserInfo=$this->getUserInfoByKey($agent->key);
        }
//        var_dump($UserInfo);exit;
        $totalData=(new AgentApi())->getTotalStat();
//        var_dump($totalData);exit;
        if($totalData->state==-1102001){
            //未登录
            yii::$app->session->set("last_url","/agent/index");
            return $this->redirect(["/agent/login-page"]);
        }
        //获取扫码参数
//        $saoma_data='';
//        if($UserInfo&&$UserInfo['Level']==8){//酒店登记才扫码
            $saoma_data=$this->GetSignPackage();
//        }

        return $this->renderPartial("index",[
                            "name"=>$agent->name,
                            "totalData"=>$totalData,
                            'UserInfo'=>$UserInfo,
                            'saoma_data'=>$saoma_data,
                        ]);
    }

    public function actionServerCenter(){
        $data=(new AgentApi())->getAgents();

        if($data&&property_exists($data,'result')){
            if($data->result){
                //服务中心对应的门店的图片
                $img=yii\db\ActiveRecord::findBySql("select agent_shop.agent_id,agent_shop.image1
        from agent_shop
        inner join agent_info on agent_info.Id=agent_shop.agent_id
        ")->asArray()->all();
                $img_arr=array_column($img,'image1','agent_id');
                foreach($data->result as &$v){
                   if(array_key_exists($v->agentid,$img_arr)){
                       $v->image=$img_arr[$v->agentid];
                   }else{
                       $v->image='';
                   }
                }
            }

        }

        return $this->renderPartial("server-center",["data"=>$data]);
    }

  //--------------电子账户分组------开始----------------
    public function actionUsers(){
        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
            return $this->redirect(["/agent/login-page"]);
        }
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return $this->redirect(["/agent/login-page"]);
        }
        //判断是运营中心还是服务中心
        $UserInfo=$this->getUserInfoByKey($agent->key);
        if($UserInfo&&$UserInfo['Level']==4){//运营中心登陆 之前的数据
            $data=(new AgentApi())->getUsers();
            return $this->renderPartial("users",["data"=>$data,'total'=>'','total_group'=>'','Id'=>'','Ids'=>'']);
        }

        //标记红点参数
        $Id=Yii::$app->request->get('Id');
        $Ids=Yii::$app->request->get('Ids');

        //该服务中心的 总用户数
        $total=yii\db\ActiveRecord::findBySql("select DISTINCT user_info.Id from user_info
        inner join dev_regist on user_info.Id=dev_regist.UserId
        inner join user_restmoney on user_restmoney.UserId=dev_regist.UserId
        and user_restmoney.AgentId=dev_regist.AgentId
        and user_restmoney.CustomerType=dev_regist.CustomerType
        where dev_regist.AgentId = $agent->key and user_restmoney.AgentId=$agent->key
        and not exists
        (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
        and dev_regist.DevNo not in ('2080111157','2079111335',
        '2080111168','2079111324','2079111234','2080111270',
        '2810000021','2081111136','2085111118','2081111338')")->count();

        //该服务中心的 总分组数(没有分组的+已分组的)
        $total_group=yii\db\ActiveRecord::findBySql("
        select DISTINCT user_restmoney.Id
        from (select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
                user_restmoney.LastSendTime,user_restmoney.Id,user_restmoney.LastSendV
                from user_restmoney
                where user_restmoney.GroupId=0 and user_restmoney.AgentId=$agent->key
                UNION
                select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
                re.LastSendTime,re.Id,re.LastSendV
                from user_restmoney
                INNER JOIN user_restmoney as re on re.Id=user_restmoney.GroupId
                where user_restmoney.GroupId>0 and user_restmoney.AgentId=$agent->key and re.AgentId=$agent->key)as user_restmoney
        inner join dev_regist on user_restmoney.UserId=dev_regist.UserId
        and user_restmoney.AgentId=dev_regist.AgentId
        and user_restmoney.CustomerType=dev_regist.CustomerType
        inner join user_info on user_info.Id=dev_regist.UserId
        where dev_regist.AgentId = $agent->key and user_restmoney.AgentId=$agent->key
        and not exists
        (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
        and dev_regist.DevNo not in ('2080111157','2079111335',
        '2080111168','2079111324','2079111234','2080111270',
        '2810000021','2081111136','2085111118','2081111338')
        ")->count();

        //列表数据（未分组的+已分组的组长）
        $users=yii\db\ActiveRecord::findBySql("
        select DISTINCT user_info.Name,user_info.Tel,user_info.Address,
        user_restmoney.GroupId,user_restmoney.Id,user_info.RowTime,
        user_restmoney.State,user_restmoney.SendWaterTime,user_info.HeadPortrait,temp.num
        from user_restmoney
        INNER JOIN user_info on user_info.Id=user_restmoney.UserId
        left JOIN (select GroupId,(count(GroupId))as num from user_restmoney
                    inner join dev_regist on dev_regist.UserId=user_restmoney.UserId
                    and dev_regist.AgentId=user_restmoney.AgentId
                    and dev_regist.CustomerType=user_restmoney.CustomerType
                where user_restmoney.GroupId > 0
                and user_restmoney.AgentId = $agent->key
                and dev_regist.AgentId = $agent->key and not exists
                (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
                and dev_regist.DevNo not in ('2080111157','2079111335',
                '2080111168','2079111324','2079111234','2080111270',
                '2810000021','2081111136','2085111118','2081111338')
                GROUP BY GroupId)as temp
        on temp.GroupId=user_restmoney.Id
        where EXISTS (select 1 from (
            select DISTINCT user_restmoney.GroupId
            from user_info
            inner join dev_regist on user_info.Id=dev_regist.UserId
            inner join (select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
            user_restmoney.Id as GroupId
            from user_restmoney
            where user_restmoney.GroupId=0
            UNION
            select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
            re.GroupId
            from user_restmoney
            INNER JOIN user_restmoney as re on re.Id=user_restmoney.GroupId
            where user_restmoney.GroupId>0)as user_restmoney
            on user_restmoney.UserId=dev_regist.UserId
            and user_restmoney.AgentId=dev_regist.AgentId
            and user_restmoney.CustomerType=dev_regist.CustomerType
            where user_restmoney.AgentId = $agent->key
             and dev_regist.AgentId = $agent->key and not exists
            (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
            and dev_regist.DevNo not in ('2080111157','2079111335',
            '2080111168','2079111324','2079111234','2080111270',
            '2810000021','2081111136','2085111118','2081111338')
            )as temp
            where GroupId=user_restmoney.Id)
            and user_restmoney.AgentId = $agent->key
            ORDER BY user_restmoney.LastActTime desc
        ")->asArray()->all();


        return $this->renderPartial("users",["data"=>$users,'total'=>$total,'total_group'=>$total_group,'Id'=>$Id,'Ids'=>$Ids]);
    }

    //Ajax 根据GroupId(组长id)获取其他组员
    public function actionGetGroupMember(){
        $GroupId=Yii::$app->request->get('GroupId');
        if(!$GroupId){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        //获取其他组员
        $data=yii\db\ActiveRecord::findBySql("
        select distinct user_info.Name,user_info.Tel,user_info.Address,
        user_restmoney.GroupId,user_restmoney.Id,user_info.HeadPortrait
        from user_info
        inner join dev_regist on user_info.Id=dev_regist.UserId
        inner join user_restmoney on user_restmoney.UserId=dev_regist.UserId
        and user_restmoney.AgentId=dev_regist.AgentId
        and user_restmoney.CustomerType=dev_regist.CustomerType
        where user_restmoney.GroupId=$GroupId and user_restmoney.Id <> $GroupId
         and not exists
        (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
        and dev_regist.DevNo not in ('2080111157','2079111335',
        '2080111168','2079111324','2079111234','2080111270',
        '2810000021','2081111136','2085111118','2081111338')
        ")->asArray()->all();

        return json_encode(['state'=>0,'data'=>$data]);

    }

    //Ajax 修改组长
    public function actionEditLeader(){
        $GroupId=Yii::$app->request->get('GroupId');//原来的组长id
        $Id=Yii::$app->request->get('Id');//电子账户id(需要修改成组长的id)
        if(!$GroupId||!$Id){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        //获取原来组的信息
        $old_account=yii\db\ActiveRecord::findBySql("select UserId,AgentId,CustomerType,
        CreateTime,LastSendV,RestWater,AverageUse,SendWaterTime,RestMoney,State
        from user_restmoney where Id=$GroupId")->asArray()->one();
        if(!$old_account){
            return json_encode(['state'=>-1,'msg'=>'没有找到原来组长的信息']);
        }
        $CreateTime=$old_account['CreateTime'];//创建时间
        $UserId=$old_account['UserId'];
        $AgentId=$old_account['AgentId'];
        $CustomerType=$old_account['CustomerType'];
        //修改前 组的充值记录、送水记录
        $group_recharge_log=yii\db\ActiveRecord::findBySql("select Id from user_recharge_log where UserId='$UserId' and AgentId=$AgentId and CustomerType=$CustomerType and RowTime > '$CreateTime'")->asArray()->one();
        $group_send_water_log=yii\db\ActiveRecord::findBySql("select Id from send_water_log where UserId='$UserId' and AgentId=$AgentId and CustomerType=$CustomerType and RowTime > '$CreateTime'")->asArray()->one();

        //修改组长后 组长的 UserId,AgentId,CustomerType
        $new_account=yii\db\ActiveRecord::findBySql("select UserId,AgentId,CustomerType from user_restmoney where Id=$Id")->asArray()->one();
        if(!$new_account){
            return json_encode(['state'=>-1,'msg'=>'没有找到新组长的信息']);
        }
        $NewUserId=$new_account['UserId'];
        $NewAgentId=$new_account['AgentId'];
        $NewCustomerType=$new_account['CustomerType'];
        $now=date('Y-m-d H:i:s');


        $transaction=Yii::$app->db->beginTransaction();
        try{
            //修改组的送水记录，充值记录（从原来组长名下修改到当前组长名下）
            if($group_recharge_log){
                $re=Yii::$app->db->createCommand("update user_recharge_log set UserId='$NewUserId' , AgentId=$NewAgentId , CustomerType=$NewCustomerType where UserId='$UserId' and AgentId=$AgentId and CustomerType=$CustomerType and RowTime > '$CreateTime'")->execute();
                if(!$re){
                    throw new yii\base\Exception ('修改充值记录失败');
                }
            }
            if($group_send_water_log){
                $re=Yii::$app->db->createCommand("update send_water_log set UserId='$NewUserId' , AgentId=$NewAgentId , CustomerType=$NewCustomerType where UserId='$UserId' and AgentId=$AgentId and CustomerType=$CustomerType and RowTime > '$CreateTime'")->execute();
                if(!$re){
                    throw new yii\base\Exception ('修改送水记录失败');
                }
            }

            //原来组长、新组长 转账记录
            $re=Yii::$app->db->createCommand("insert into user_recharge_log (`UserId`,`AgentId`,`CustomerType`,`PayMoney`,`PayType`,`RestMoney`,`RowTime`,`OutOrIn`,`GroupMemberId`)
            values ('{$old_account['UserId']}',{$old_account['AgentId']},{$old_account['CustomerType']},-{$old_account['RestMoney']},4,0,'$now',2,$GroupId),
            ('{$new_account['UserId']}',{$new_account['AgentId']},{$new_account['CustomerType']},{$old_account['RestMoney']},4,{$old_account['RestMoney']},'$now',2,$Id)
            ")->execute();
            if(!$re){
                throw new yii\base\Exception ('添加转账记录失败');
            }

            //修改组长
            $re=Yii::$app->db->createCommand("update user_restmoney set GroupId=$Id where GroupId=$GroupId")->execute();
            if(!$re){
                throw new yii\base\Exception ('修改组长失败');
            }
            //将创建组时间保存到新组长账户
            //将原来组长账户的信息 转到新组长
            $re=Yii::$app->db->createCommand("update user_restmoney set CreateTime='$CreateTime',
            LastSendV={$old_account['LastSendV']},RestWater={$old_account['RestWater']},
            AverageUse={$old_account['AverageUse']},SendWaterTime='{$old_account['SendWaterTime']}',
            RestMoney={$old_account['RestMoney']},State={$old_account['State']},LastActTime='$now'
            where Id=$Id")->execute();

            if(!$re){
                throw new yii\base\Exception ('修改新组长信息失败');
            }
            //将原来组的信息 还原（分组前的）
            $before_data=yii\db\ActiveRecord::findBySql("select * from before_group_user_restmoney where Id=$GroupId")->asArray()->one();
            if(!$before_data)throw new yii\base\Exception ('没有找到组长之前的信息');
            $re=Yii::$app->db->createCommand("update user_restmoney set CreateTime='0',
            LastSendV={$before_data['LastSendV']},RestWater={$before_data['RestWater']},
            AverageUse={$before_data['AverageUse']},SendWaterTime='{$before_data['SendWaterTime']}',
            RestMoney={$before_data['RestMoney']},State={$before_data['State']},
            LastActTime='{$before_data['LastActTime']}', CreateTime='{$before_data['CreateTime']}'
            where Id=$GroupId")->execute();
            if(!$re){
                throw new yii\base\Exception ('还原原来组长信息失败');
            }


            $transaction->commit();
            return json_encode(['state'=>0]);
        }catch (yii\base\Exception $e){
            $transaction->rollBack();
//            var_dump(['state'=>-1,'msg'=>$e->getMessage()]);
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }

    }

    //Ajax 获取添加组员 数据
    public function actionAddMemberDatas(){
        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请登陆']);
        }
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'没有获取到登陆信息']);
        }
        $data='';
        $GroupId=Yii::$app->request->get('Id');//组长id
        if($GroupId){
            //该服务中心下的未分组的用户
            $data=yii\db\ActiveRecord::findBySql("
        select distinct user_info.Name,user_info.Tel,user_info.Address,
        user_restmoney.Id,user_info.HeadPortrait
        from user_info
        inner join dev_regist on user_info.Id=dev_regist.UserId
        inner join user_restmoney on user_restmoney.UserId=dev_regist.UserId
        and user_restmoney.AgentId=dev_regist.AgentId
        and user_restmoney.CustomerType=dev_regist.CustomerType
        where user_restmoney.AgentId=$agent->key and user_restmoney.GroupId=0
        and dev_regist.AgentId=$agent->key and user_restmoney.Id <> $GroupId
        and (user_restmoney.State=1 or user_restmoney.State=3)
         and not exists
        (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
        and dev_regist.DevNo not in ('2080111157','2079111335',
        '2080111168','2079111324','2079111234','2080111270',
        '2810000021','2081111136','2085111118','2081111338')
        ")->asArray()->all();
        }

        return json_encode(['data'=>$data,'Id'=>$GroupId]);

    }

    //Ajax保存添加的组成员
    public function actionSaveAddMember(){
        $GroupId=Yii::$app->request->get('Id');//组长id
        $Ids=Yii::$app->request->get('Ids');//添加成员的电子账户id
        if(!$GroupId||!$Ids){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $now=date('Y-m-d H:i:s');
        //是否是第一次添加组员
        $member=yii\db\ActiveRecord::findBySql("select Id from user_restmoney where GroupId=$GroupId")->asArray()->one();

        //将添加成员的账户信息 保存到组长账户
        $data=yii\db\ActiveRecord::findBySql("
            select sum(RestMoney) as AllRestMoney,sum(RestWater) as AllRestWater,
            sum(AverageUse) as NewAverageUse,sum(LastSendV) as AllLastSendV from user_restmoney where Id in ($Ids)
            ")->asArray()->one();
        if(!$data){
            return json_encode(['state'=>-1,'msg'=>'没有找到成员水票信息']);
        }
        //组长信息
        $account=yii\db\ActiveRecord::findBySql("
        select LastSendV,RestWater,AverageUse,SendWaterTime,
        UserId,AgentId,CustomerType,RestMoney,State
        from user_restmoney where Id=$GroupId
        ")->asArray()->one();
        if(!$account){
            return json_encode(['state'=>-1,'msg'=>'没有找到组长水票信息']);
        }
        //成员的转账记录、组长的转账记录
        $data2=yii\db\ActiveRecord::findBySql("
            select RestMoney,UserId,AgentId,CustomerType,Id
            from user_restmoney where Id in ($Ids)
            ")->asArray()->all();
        $sql_str='insert into user_recharge_log (`UserId`,`AgentId`,`CustomerType`,`PayMoney`,`PayType`,`RestMoney`,`RowTime`,`OutOrIn`,`GroupMemberId`) values ';
        $RestMoney=$account['RestMoney'];//组长的余额
        $tag=0;
        foreach($data2 as $k=>$v){
            if($v['RestMoney'] != 0){
                $RestMoney+=$v['RestMoney'];
                if($tag==0){
                    $sql_str.="('{$v['UserId']}',{$v['AgentId']},{$v['CustomerType']},-{$v['RestMoney']},4,0,'$now',1,$GroupId),
                ('{$account['UserId']}',{$account['AgentId']},{$account['CustomerType']},{$v['RestMoney']},4,$RestMoney,'$now',1,{$v['Id']})";
                }else{
                    $sql_str.=",('{$v['UserId']}',{$v['AgentId']},{$v['CustomerType']},-{$v['RestMoney']},4,0,'$now',1,$GroupId),
                ('{$account['UserId']}',{$account['AgentId']},{$account['CustomerType']},{$v['RestMoney']},4,$RestMoney,'$now',1,{$v['Id']})";
                }
                $tag++;
            }

        }


        //合并后的平均用水量、剩余水量、上次送水量
        $AverageUse=$account['AverageUse']+$data['NewAverageUse'];
        $RestWater=$account['RestWater']+$data['AllRestWater'];
        $LastSendV=$account['LastSendV']+$data['AllLastSendV'];
        $SendWaterTime='近期还没有用水';
        $State=1;//账户状态，默认 需送水
        if($LastSendV <= 0){
            $SendWaterTime='没有送水记录';
        }elseif($AverageUse>0){
            $days=floor($RestWater/$AverageUse);//还能用几天
            $SendWaterTime=date('Y-m-d',strtotime("+$days day"));
            if($days > 3){//下次预计送水时间大于3天
                $State=3;//已完成
            }
        }
        if($account['State']==2){//组长账户 原来是已配送状态
            //还是 已配送状态
            $State=2;//已配送
        }

        $transaction=Yii::$app->db->beginTransaction();
        try{

            if($member){//不是第一次添加成员
                //修改合并后的组长的账户信息(余额、剩余水量、上次送水量、预计送水时间)
                $sql="update user_restmoney set RestMoney=RestMoney+{$data['AllRestMoney']},State=$State,
                RestWater=RestWater+{$data['AllRestWater']},LastSendV=LastSendV+{$data['AllLastSendV']},
                SendWaterTime='$SendWaterTime',AverageUse=$AverageUse,LastActTime='$now' where Id = $GroupId";

                //保存 组长、成员 分组之前的账户信息
                $before_data=yii\db\ActiveRecord::findBySql("select * from user_restmoney where Id in ($Ids)")->asArray()->all();


            }else{//第一次添加成员
                //修改合并后的组长的账户信息(余额、剩余水量、上次送水量、预计送水时间、组id、创建组时间)
                $sql="update user_restmoney set RestMoney=RestMoney+{$data['AllRestMoney']},State=$State,
                RestWater=RestWater+{$data['AllRestWater']},LastSendV=LastSendV+{$data['AllLastSendV']},
                SendWaterTime='$SendWaterTime',AverageUse=$AverageUse,GroupId=$GroupId,CreateTime='$now',LastActTime='$now' where Id = $GroupId";
                //保存 成员 分组之前的账户信息
                $before_data=yii\db\ActiveRecord::findBySql("select * from user_restmoney where Id in ($Ids) or Id=$GroupId")->asArray()->all();

            }
            //已经保存的信息 有添加的成员 删除
            $old_data=yii\db\ActiveRecord::findBySql("select Id from before_group_user_restmoney")->asArray()->all();
            $array_old_Id=array_column($old_data,'Id');
            $delete_ids='';
            //保存 成员 分组之前的账户信息
            $before_sql="insert into before_group_user_restmoney Values ";
            foreach($before_data as $k=>$v){
                if(in_array($v['Id'],$array_old_Id)){
                    if(!$delete_ids){
                        $delete_ids.=$v['Id'];
                    }else{
                        $delete_ids.=','.$v['Id'];
                    }

                }
                if($k==0){
                    $before_sql.="({$v['Id']},'{$v['UserId']}',{$v['CustomerType']},{$v['AgentId']},
                    {$v['RestMoney']},'{$v['LastActTime']}',{$v['TotalSendV']},{$v['LastSendV']},
                    ".($v['LastSendDate']?"'".$v['LastSendDate']."'":"'".'0000-00-00'."'").",
                    ".($v['LastSendTime']?"'".$v['LastSendTime']."'":"'".'0000-00-00 00:00:00'."'").",
                    {$v['UseVolume']},{$v['RestWater']},
                    '{$v['SendWaterTime']}',{$v['AverageUse']},{$v['State']},{$v['GroupId']},
                    '{$v['CreateTime']}')";
                }else{
                    $before_sql.=",({$v['Id']},'{$v['UserId']}',{$v['CustomerType']},{$v['AgentId']},
                    {$v['RestMoney']},'{$v['LastActTime']}',{$v['TotalSendV']},{$v['LastSendV']},
                    ".($v['LastSendDate']?"'".$v['LastSendDate']."'":"'".'0000-00-00'."'").",
                    ".($v['LastSendTime']?"'".$v['LastSendTime']."'":"'".'0000-00-00 00:00:00'."'").",
                    {$v['UseVolume']},{$v['RestWater']},
                    '{$v['SendWaterTime']}',{$v['AverageUse']},{$v['State']},{$v['GroupId']},
                    '{$v['CreateTime']}')";
                }
            }
            if($delete_ids){
                $delete_sql="delete from before_group_user_restmoney where Id in ($delete_ids)";
                //删除已添加成员分组之前的账户信息
                $re=Yii::$app->db->createCommand($delete_sql)->execute();
                if(!$re){
                    throw new yii\base\Exception ('删除已添加成员分组之前的账户信息失败');
                }
            }


            //添加 成员 分组之前的账户信息
            $re=Yii::$app->db->createCommand($before_sql)->execute();
            if(!$re){
                throw new yii\base\Exception ('添加分组前的账户信息失败');
            }

            $re=Yii::$app->db->createCommand($sql)->execute();
            if(!$re)throw new yii\base\Exception ('合并账户信息失败');

            //保存添加
            $re=Yii::$app->db->createCommand("update user_restmoney set GroupId=$GroupId,
             RestMoney=0,RestWater=0 where Id in ($Ids)")->execute();
            if(!$re){
                throw new yii\base\Exception ('添加组员失败');
            }
            //保存成员的转账记录、组长的转账记录
            if($tag > 0){
                $re=Yii::$app->db->createCommand($sql_str)->execute();
                if(!$re){
                    throw new yii\base\Exception ('保存成员、组长的转账记录失败');
                }
            }

            $transaction->commit();
            return json_encode(['state'=>0]);

        }catch (yii\base\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }



    }

 //----------------电子账户分组---结束---------------------


     public function actionLogout(){
        yii::$app->session->set("user", null);
        yii::$app->session->set("token", null);
        yii::$app->session->set("key", null);
        return "清除缓存";
    }
    //投资设备详情
    public function actionInvestor(){
        $data=(new AgentApi())->getInvestor();
//      var_dump($data);exit;
        return $this->renderPartial("investor",["data"=>$data]);
    }
    //设备预警
    public function actionDevWarning(){
        $data=(new AgentApi())->getdevwarning();
        if($data->state==0&&property_exists($data,'result')){
//            $array=json_decode(json_encode($data->result),true);
//            $tel_str=json_encode(array_column($array,'mobile'));
//            $tel=str_replace('"',"'",$tel_str);
//            $tel=substr($tel,1,-1);
            $tel_data=yii\db\ActiveRecord::findBySql("select Tel,HeadPortrait from user_info")->asArray()->all();
            $tel_arr=array_column($tel_data,'HeadPortrait','Tel');
            foreach($data->result as &$v){
                if(array_key_exists($v->mobile,$tel_arr)){
                   $v->HeadPortrait=$tel_arr[$v->mobile];
                }else{
                    $v->HeadPortrait='';
                }
            }
        }

//      var_dump($data);exit;
        return $this->renderPartial("hardware",["data"=>$data]);
    }
    //设备列表接口
    public function actionDevList(){
        $is_search=Yii::$app->request->get('is_search');//是否是搜索，状态返回，前端好判断
        $data=(new AgentApi())->getdevlist();
//      var_dump($data);exit;
        //每台设备的上传图片状态
        $agent_id=0;
        $agent=Yii::$app->session->get("agent_user");//登陆者信息
        if($agent&&property_exists($agent,'key')){
               $agent_id=$agent->key;
        }
        $image_data=yii\db\ActiveRecord::findBySql("select dev_regist.DevNo,
        dev_regist.ImageState,dev_regist.Image,dev_regist.TempImage,
        dev_regist.ImageErrorReason,user_info.Tel
        from dev_regist
        INNER JOIN user_info ON user_info.Id=dev_regist.UserId
        where dev_regist.AgentId = $agent_id and dev_regist.AgentId > 0
        and  not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)")->asArray()->all();

        $DevNo=array_column($image_data,'DevNo');
        $image_state=array_combine($DevNo,$image_data);
        //将电话加入数据
        $devno_tel=array_column($image_data,'Tel','DevNo');
        if(property_exists($data,'result')){
            foreach($data->result as &$v){
                if(array_key_exists($v->mobile,$devno_tel)){
                    $v->Tel=$devno_tel[$v->mobile];
                }else{
                    $v->Tel='';
                }
            }
        }

        //扫一扫参数（拍照）
        $saoma_data=$this->GetSignPackage();
        return $this->renderPartial("dev-list",
            [
                "data"=>$data,
                'image_state'=>json_encode($image_state),
                'saoma_data'=>$saoma_data,
                'is_search'=>$is_search,
            ]);
    }

    /**
     * ajax 登录
     */
    public function actionLogin()
    {
        $username=Yii::$app->request->get("username");
        $pwd=Yii::$app->request->get("password");
        if(empty($username)||empty($pwd)){
            $data=json_decode("{}");
            $data->state=-1;
            $data->msg='用户名或密码不能为空';
            $this->jsonReturn($data);
            return;
        }
        $data['Account']=$username;
        $data['Pwd']=md5($pwd);
        $res=(new AgentLoginApi())->post($data);
//        var_dump($res);exit;
        if($res->state==0){
            //登录成功,保存登录信息
            $this->saveAgentUser($res->result);
        }
        $this->jsonReturn($res);
    }
    public function actionSkip(){
        $last_url= yii::$app->session->get("last_url");
        if(empty($last_url)){
        exit();
        }
        $this->redirect([$last_url]);
    }
    /**
     * 登记
     * @return string
     */
    public function actionRegister(){

        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }
        //二维码参数，酒店登记才有
        $CodeNumber=Yii::$app->request->get('CodeNumber');

            $agent=Yii::$app->session->get("agent_user");//登陆者信息
            //获取该服务中心的入网属性
            $use_type='';
//            $agent_address='';//服务中心地址

//            if($agent->level==5&&$agent->key){//登陆者是服务中心
            if($agent&&property_exists($agent,'key')){
                $agent_codes=yii\db\ActiveRecord::findBySql("select code from agent_usetype where agent_id=$agent->key")->asArray()->one();
                $codes='';
                if($agent_codes){
                    $codes=$agent_codes['code'];
                }
                if($codes){
                    $use_type=yii\db\ActiveRecord::findBySql("select code,use_type from agent_usetype_code where code in ($codes)")->asArray()->all();
                }
//                $agent_address=yii\db\ActiveRecord::findBySql("select Province,City,Area from agent_info where Id=$agent->key")->asArray()->one();

            }

//            var_dump($use_type);exit;
        return $this->renderPartial("register",
            [
            'datas'=>[
                'state'=>0,
                'info'=>'',
                'mas'=>'',
                'use_type'=>$use_type,
                'CodeNumber'=>$CodeNumber,
            ],

        ]);
    }
//登记第二步，填写设备信息
    public function actionRegisterDevInfo(){

        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }

        // 接收地图传递的坐标数据
        $addressName=$this->getParam('addressName');
        $coordinatelng=$this->getParam('coordinatelng');
        $coordinatelat=$this->getParam('coordinatelat');
        $jsonobj=$this->getParam('jsonobj');
        $state=$this->getParam('state');
        //继续登记时传递DevNo
        $DevNo=$this->getParam('DevNo');
        $user_base='';
        if(!$DevNo){//不是继续登记
            //登记第一步的数据（基本数据）
            $user_base=Yii::$app->request->get('user_base');
            if(!$user_base){
                $select=$this->GetSelect();
                return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'没有基本信息','info'=>['last_info'=>$user_base,'select'=>$select]]]);

            }
        }



        $BaseInfo='';
        if($DevNo){
            //基本信息
            $BaseInfo=yii\db\ActiveRecord::findBySql("select dev_regist.UseType,dev_regist.CustomerType,user_info.Name,user_info.Tel,
dev_regist.brand_id,dev_regist.goods_id,dev_regist.Province,dev_regist.City,dev_regist.Area,dev_regist.Address
           from dev_regist
           left join user_info on user_info.Id=dev_regist.UserId
           where dev_regist.DevNo='$DevNo'
           ")->asArray()->all();
        }

        $res=(new AgentGetDevFactoryApi())->post([]);
        $ares=(new AddressApi())->get();
        $result=(new BrandGoodsApi())->getbrandgoods();//品牌和型号
//        var_dump($result);exit;
        $data=[];
        $Adata=[];
        $Bdata=[];
        if($res->state==0){
            $data=$res->result;
        }
        if($ares->state==0){
            $Adata=$ares->result;
        }
        if($result){
            if($result->state==0){
                $Bdata=$result->result;//品牌和型号
            }
        }
        $agent=Yii::$app->session->get("agent_user");//登陆者信息
        //获取该服务中心的入网属性
        $use_type='';
        $agent_address='';//服务中心地址

        if($agent&&property_exists($agent,'key')){
            $agent_codes=yii\db\ActiveRecord::findBySql("select code from agent_usetype where agent_id=$agent->key")->asArray()->one();
            $codes='';
            if($agent_codes){
                $codes=$agent_codes['code'];
            }
            if($codes){
                $use_type=yii\db\ActiveRecord::findBySql("select code,use_type from agent_usetype_code where code in ($codes)")->asArray()->all();
            }
            $agent_address=yii\db\ActiveRecord::findBySql("select Province,City,Area from agent_info where Id=$agent->key")->asArray()->one();

        }

//            var_dump($use_type);exit;

        //扫一扫参数
        $saoma_data=$this->GetSignPackage();


        return $this->renderPartial("register-dev-info",
            [
                'datas'=>[
                    'state'=>0,
                    'info'=>'',
                    'mag'=>'',
                    'data'=>$data,
                    'adata'=>$Adata,
                    'bdata'=>$Bdata,
                    'use_type'=>$use_type,
                    'agent_address'=>$agent_address,
                    'DevNo'=>$DevNo,
                    'BaseInfo'=>$BaseInfo,
                    'user_base'=>$user_base,
                    'saoma_data'=>$saoma_data,

                    'coordinate'=>json_encode([
                        'Name'=>$addressName,
                        'state'=>$state,
                        'jsonobj'=>$jsonobj,
                        'Lng'=>$coordinatelng,
                        'Lat'=>$coordinatelat])
                ],

            ]);
    }


    /*  
     * 用户登记
     */ 
//    public function actionUserRegister(){
//        $data=Yii::$app->request->get();
//        $this->jsonReturn((new AgentRegistApi())->post($data));
//    }


    /**
     * 数据总览
     * @return string|yii\web\Response
     */
//    public function actionDataView(){
//        if(!$this->checkAgentLogin()){
//        yii::$app->session->set("last_url","/agent/data-view");
//        //return $this->redirect(["/agent/  设备投资有限公司"]);
//        }
//        $data=(new AgentApi())->getTotalStat();
//        return $this->renderPartial("dataview",["data"=>$data]);
//    }
    /**
     * 硬件告警
     * @return string|yii\web\Response
     */
    public function actionHardwareWarn(){
        if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url","/agent/hardware-warn");
            return $this->redirect(["/agent/login-page"]);
        }
        $data=(new AgentApi())->getWarning();

        return $this->renderPartial("hardware",["data"=>$data]);
    }
    /**
     * 获取手机验证码
     */
    public function actionGetVcode(){
        $tel=Yii::$app->request->get("tel");
        $this->jsonReturn((new SmsSendApi())->post($tel));
    }

    //验证短信验证码(设备注册)
    public function actionCheckVcode(){
        $tel=Yii::$app->request->get("tel");
        $vcode=Yii::$app->request->get("vcode");

        //登陆者信息
//        $agent=Yii::$app->session->get("agent_user");
//        if($agent&&$agent->key) {
//            //判断该服务中心是否有设置该电话为白名单，且登记数量未达到上限
//            if ($this->CheckWhiteList($agent->key, $tel)) {
//                return json_encode(['state' => 0]);
//            }
//        }

        $result=(new CheckVcodeApi())->post($tel,$vcode);
        if($result->state!=0){
            $msg=$this->getMsgByErrorCode($result->state);
            return json_encode(['state'=>-1,'msg'=>$msg]);
        }
        return json_encode(['state'=>0]);

    }

    /**
     * 激活
     * @return string|yii\web\Response
     */

    public function actionActivate(){
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url","/agent/activate");
             return $this->redirect(["/agent/login-page"]);
         }
        //酒店登记，会有扫一扫参数
        $saoma_data='';
        $is_saoma_data=Yii::$app->request->get('is_saoma_data');
        if($is_saoma_data=='YES'){
            //扫一扫参数
            $saoma_data=$this->GetSignPackage();
        }
        return $this->renderPartial("activate",['saoma_data'=>$saoma_data]);
    }

    /**
     * 报表和数据总览
     * @return string|yii\web\Response
     */
    public function actionChart(){
        if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url","/agent/chart");
            return $this->redirect(["/agent/login-page"]);
        }
        $res=(new AgentApi())->getDayStat();
        if($res->state!=0){
            $this->toError();
        }
        $datax=[];
        $datay=[];
        foreach($res->result->watersale as $val){
            array_push($datax,$val->day);
            array_push($datay,$val->value);
        }
        $userdatax=[];
        $userdatay=[];
        foreach($res->result->customer as $val){
            array_push($userdatax,$val->day);
            array_push($userdatay,$val->value);
        }
        //数据总览数据
        $data=(new AgentApi())->getTotalStat();
        return $this->renderPartial("chart",["datax"=>$datax,"datay"=>$datay,"userdatax"=>$userdatax,"userdatay"=>$userdatay,'data'=>$data]);
    }

    //------------------------------------------

    //登记后创建电子账户
    public function actionCreateAccount(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }

        $data=Yii::$app->request->get();//基本信息
//        var_dump($data);exit;

        if(!$data){
            $select=$this->GetSelect();
            return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'登记信息为空','info'=>['last_info'=>$data,'select'=>$select]]]);
        }

        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
//            return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'没有登陆信息','info'=>$data]]);
            $select=$this->GetSelect();
            return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'没有登陆信息','info'=>['last_info'=>$data,'select'=>$select]]]);
        }


        //激活码上的品牌和型号
        $BrandName='';
        $GoodsName='';
        $result1=yii\db\ActiveRecord::findBySql("select BrandName from brands where BrandNo='{$data['brandid']}'")->asArray()->one();
        $result2=yii\db\ActiveRecord::findBySql("select `name` from goods where id={$data['goodsid']}")->asArray()->one();
        if($result1){
            $BrandName=$result1['BrandName'];
        }
        if($result2){
            $GoodsName=$result2['name'];
        }


//-------酒店登记不创建电子水票-------------------
        //获取登陆者信息
        $UserInfo=$this->getUserInfoByKey($agent->key);
        //是否是酒店登记
        if($UserInfo&&$UserInfo['Level']==8){//酒店登记
            //保存
            $result=(new AgentRegistApi())->post($data);
            if ($result->state != 0 && empty($result->msg)) {
                $msg = $this->getMsgByErrorCode($result->state);
                $select=$this->GetSelect();
                return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>$msg,'info'=>['last_info'=>$data,'select'=>$select]]]);
            }

            $DevNo=$result->result->devNo;

            //下发可用余量为0
            $now=date('Y-m-d H:i:s',time());
            $ExpiredTime=date('Y-m-d H:i:s',time()+300);
            $sql="insert into dev_cmd (DevNo,StartTime,ExpiredTime,CmdType,Cmd,RowTime)
VALUES ('$DevNo','$now','$ExpiredTime',9,'1,1,0,$now','$now')";
            $res=\Yii::$app->db->createCommand($sql)->execute();

            //激活
            header("Location: /index.php/agent/activate?code=$DevNo&BrandName=$BrandName&GoodsName=$GoodsName&is_saoma_data=YES");
            exit;
        }
//-----------------------------------
        //判断该用户是否登记过同样信息的设备(地址是否重复、电话是否重复)
        $datas=$this->CheckSameInfo($agent->key,$data);
        if($datas){
            return $this->renderPartial('register-dev-info',['datas'=>$datas['datas']]);
        }


        $user_info=yii\db\ActiveRecord::findBySql("select Id from user_info where Tel={$data['Tel']}")->asArray()->one();
        $user='';
        if($user_info){//之前登记过
            $UserId=$user_info['Id'];
            $user=yii\db\ActiveRecord::findBySql("select Id from user_restmoney where UserId='$UserId' and CustomerType={$data['customertype']} and AgentId=$agent->key")->asArray()->one();

        }

        if($user){//创建过电子账户

            //保存
            $result=(new AgentRegistApi())->post($data);
            if ($result->state != 0 && empty($result->msg)) {
                $msg = $this->getMsgByErrorCode($result->state);
                $select=$this->GetSelect();
                return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>$msg,'info'=>['last_info'=>$data,'select'=>$select]]]);
            }

            $DevNo=$result->result->devNo;

            //激活
            header("Location: /index.php/agent/activate?code=$DevNo&BrandName=$BrandName&GoodsName=$GoodsName");
            exit;

        }

        $datas='';//品牌、商品、容量数据

//        if($agent->level==5) {//是服务中心登陆

            //获取该服务中心的水品牌
            $water_brand = yii\db\ActiveRecord::findBySql("select brands.BrandNo,brands.BrandName from agent_goods
INNER JOIN goods on goods.id=agent_goods.goods_id
INNER JOIN brands on brands.BrandNo=goods.brand_id
where agent_goods.agent_id=$agent->key and brands.CategoryId=1 group by brands.BrandNo")->asArray()->all();
            //水商品
            $water_goods = yii\db\ActiveRecord::findBySql("select goods.`name`,goods.brand_id from agent_goods
INNER JOIN goods on goods.id=agent_goods.goods_id
where agent_goods.agent_id=$agent->key
and goods.category_id=1 group by goods.`name`")->asArray()->all();
            //容量
            $water_volume = yii\db\ActiveRecord::findBySql("select goods.`name`,goods.brand_id,goods.volume from agent_goods
INNER JOIN goods on goods.id=agent_goods.goods_id
where agent_goods.agent_id=$agent->key
and goods.category_id=1 ")->asArray()->all();

            $datas=json_encode(['water_brand'=>$water_brand,
                                'water_goods'=>$water_goods,
                                'water_volume'=>$water_volume]);
//        }
//var_dump($data);exit;
        return $this->renderPartial('create-account',['state'=>0,'datas'=>$datas,'data'=>$data]);

    }

    //ajax 登记创建电子账户时获取对应的库存和单价
    public function actionStockPriceWhenRegister(){

        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             return json_encode(['state'=>-1,'mas'=>'还未登陆']);
         }

        $brand_id=$this->getParam('brand_id');
        $water_name=$this->getParam('water_name');
        $water_volume=$this->getParam('water_volume');
        if($brand_id==''||$water_name==''||$water_volume==''){
            return json_encode(['state'=>-1,'mas'=>'参数错误']);

        }

        $result='';
        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if($agent&&property_exists($agent,'key')) {
            //商品id
            $data=yii\db\ActiveRecord::findBySql("select id from goods
where category_id=1 and `name`='$water_name' and brand_id='$brand_id' and volume=$water_volume")->asArray()->one();

            if(!$data){
                return json_encode(['state'=>-1,'mas'=>'该商品不存在']);
            }

            $goods_id = $data['id'];
            $data2=yii\db\ActiveRecord::findBySql("select stock,realprice from agent_goods where agent_id=$agent->key and goods_id=$goods_id")->asArray()->one();

            if(!$data2){
                return json_encode(['state'=>-1,'mas'=>'该服务中心没有此商品']);
            }

            //库存
            $result['water_stock']=$data2['stock'];
            //单价
            $result['water_price']=$data2['realprice'];

        }

//        var_dump($result);exit;

        return json_encode(['state'=>0,'datas'=>$result]);
    }

    //保存创建电子账户  已弃用
    public function actionSaveAccount(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
            return $this->redirect(["/agent/login-page"]);
        }

//        $DevNo=$this->getParam('DevNo');
        $data=$this->getParam('data');//登记数据

        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
//            return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'没有登陆信息','info'=>$data]]);
            $select=$this->GetSelect();
            return $this->renderPartial('register',['datas'=>['state'=>-1,'mag'=>'没有登陆信息','info'=>['last_info'=>$data,'select'=>$select]]]);
        }

//        var_dump($data);exit;
        $pay_type=$this->getParam('pay_type');//支付方式 1 现金，2 微信，3 支付宝
        $pay_money=addslashes($this->getParam('pay_money'));//支付金额
        $brand_id=$this->getParam('brand_id');//品牌
        $water_name=$this->getParam('water_name');//名称
        $water_volume=$this->getParam('water_volume');//容量
        $amount=$this->getParam('amount');//数量
        $price=$this->getParam('price');//单价
        $use_money=$this->getParam('use_money');//合计
        $rest_money=$this->getParam('rest_money');//余额
//        $send_time=$this->getParam('send_time');//预计送水时间
        if($pay_type==''||$data==''||$brand_id==''||$water_name==''||$water_volume==''||
            $pay_money==''||$amount==''||$price==''||$use_money==''||$rest_money==''||
            floor($amount)!=$amount||$amount<1){
//            var_dump(['state'=>-1,'mas'=>'参数错误']);exit;
            return json_encode(['state'=>-1,'mas'=>'数据不完整']);
        }



//        //判断该用户是否登记过同样信息的设备（重复地址、重复电话）
        $datas=$this->CheckSameInfo($agent->key,$data);
        if($datas){
            return $this->renderPartial('register-dev-info',['datas'=>$datas['datas']]);
            }
        //保存
        $result=(new AgentRegistApi())->post($data);
        if ($result->state != 0 && empty($result->msg)) {
            $msg = $this->getMsgByErrorCode($result->state);
            return json_encode(['state'=>-1,'mas'=>$msg]);
        }
        $DevNo=$result->result->devNo;
//        var_dump($DevNo);exit;
        //获取UserId、CustomerType、AgentId
        $user=yii\db\ActiveRecord::findBySql("select UserId,CustomerType,AgentId,
brands.BrandName,goods.name as GoodsName
from dev_regist
LEFT join brands on brands.BrandNo=dev_regist.brand_id
LEFT join goods on goods.id=dev_regist.goods_id
where DevNo='$DevNo'")->asArray()->one();

        if(!$user){
//            var_dump(['state'=>-1,'mas'=>'该设备没有绑定用户']);exit;
            return json_encode(['state'=>-1,'mas'=>'该设备没有绑定用户']);
        }
        $UserId=$user['UserId'];
        $CustomerType=$user['CustomerType'];
        $AgentId=$user['AgentId'];

        //判断是否创建过电子账户
        $data=yii\db\ActiveRecord::findBySql("select Id from user_restmoney where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId")->asArray()->one();
        if($data){
//            var_dump(['state'=>-1,'mas'=>'该用户已创建过电子账户']);exit;
            return json_encode(['state'=>-1,'mas'=>'该用户已创建过电子账户']);
        }
        //获取该服务中心门店的商品信息
        $good=yii\db\ActiveRecord::findBySql("select id from goods
where category_id=1 and `name`='$water_name' and brand_id='$brand_id' and volume=$water_volume")->asArray()->one();

        if(!$good){
//            var_dump(['state'=>-1,'mas'=>'该商品不存在']);exit;
            return json_encode(['state'=>-1,'mas'=>'该商品不存在']);
        }
        $goods_id=$good['id'];

        //获取此时数据库的库存和价格
        $data=yii\db\ActiveRecord::findBySql("select stock,realprice from agent_goods where agent_id=$AgentId and goods_id=$goods_id")->asArray()->one();
        if(!$data){
//            var_dump(['state'=>-1,'mas'=>'该服务中心没有该商品']);exit;
            return json_encode(['state'=>-1,'mas'=>'该服务中心没有该商品']);
        }
        $stock=$data['stock'];
        $price=$data['realprice'];

        $new_stock=$stock-$amount;//新的库存

        if($new_stock<0){
//            var_dump(['state'=>-1,'mas'=>'库存不足']);exit;
            return json_encode(['state'=>-1,'mas'=>'库存不足']);
        }

//        $TotalSendV=$water_volume*$amount;//送水总容量
        $use_money=$price*$amount;
        $RestMoney=$pay_money-$use_money;//剩余金额
        $now=date('Y-m-d H:i:s',time());
        $now2=date('Y-m-d H:i:s',time()+1);//送水时间间隔1秒
        $from=2;//服务中心  1 微信端（客户），2 服务中心，3 太极兵

        if($RestMoney < -500){//最多欠500
//            var_dump(['state'=>-1,'mas'=>'余额不足']);exit;
            return json_encode(['state'=>-1,'mas'=>'余额不能小于-500']);
        }



        //保存充值账户（user_restmoney）、充值记录（user_restmoney_log）、送水记录（send_water_log）
        $sql1="insert into user_restmoney (`UserId`,`CustomerType`,`AgentId`,`RestMoney`,`LastActTime`,`TotalSendV`,`RestWater`,`SendWaterTime`,`AverageUse`)
VALUES ('$UserId',$CustomerType,$AgentId,$RestMoney,'$now',0,0,'没有送水记录',0)";

        $sql2="insert into user_recharge_log (`UserId`,`CustomerType`,`AgentId`,`PayMoney`,`PayType`,`RestMoney`,`RowTime`)
VALUES ('$UserId',$CustomerType,$AgentId,$pay_money,$pay_type,$pay_money,'$now')";

        //减去库存
        $sql3="update agent_goods set stock=stock-$amount where agent_id=$AgentId and goods_id=$goods_id";


        $sql4="insert into send_water_log (`UserId`,`CustomerType`,`AgentId`,`WaterBrandNo`,`WaterGoodsId`,`Volume`,`Amount`,`UseMoney`,`RestMoney`,`SendTime`,`Price`,`State`,`RowTime`,`From`)
VALUES ('$UserId',$CustomerType,$AgentId,'$brand_id',$goods_id,$water_volume,$amount,$use_money,$RestMoney,'$now2',$price,1,'$now2',$from)";

        //事务
        $transaction=\Yii::$app->db->beginTransaction();
        try{
            //保存充值账户
            $res= \Yii::$app->db->createCommand($sql1)->execute();
            if(!$res){
                throw new \Exception('保存充值账户失败！');
            }
            //保存充值记录
            $res= \Yii::$app->db->createCommand($sql2)->execute();
            if(!$res){
                throw new \Exception('保存充值记录失败！');
            }
            //减去库存
            $re= \Yii::$app->db->createCommand($sql3)->execute();
            if(!$re){
                throw new \Exception('减去库存失败！');
            }
            //保存送水记录
            $r= \Yii::$app->db->createCommand($sql4)->execute();
            if(!$r){
                throw new \Exception('保存送水记录失败！');
            }

            $transaction->commit();
            return json_encode(['state'=>0,'code'=>$DevNo,
                'BrandName'=>$user['BrandName'],'GoodsName'=>$user['GoodsName']]);
            //激活码
//            header("Location: /index.php/agent/activate?code=$DevNo&BrandName={$user['BrandName']}&GoodsName={$user['GoodsName']}");
//            exit;
        }catch (\Exception $e){
            $transaction->rollBack();
//            $mas=$e->getMessage();
//            var_dump(['state'=>-1,'mas'=>$mas]);exit;
            return json_encode(['state'=>-1,'mas'=>'创建电子账户失败']);
        }

    }

    //智能送水接口
    public function actionSendWater(){
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }
        $datas='';
        $agent=Yii::$app->session->get("agent_user");//登陆者信息
        if($agent&&property_exists($agent,'key')){
            //该服务中心的智能送水数据(未分组的+已分组的组长）
                $datas=yii\db\ActiveRecord::findBySql("
            select DISTINCT user_restmoney.UserId,user_restmoney.CustomerType,
            user_restmoney.AgentId,user_info.Name,user_restmoney.SendWaterTime,
            user_restmoney.RestWater,user_restmoney.State,user_info.HeadPortrait,user_info.Tel
            from user_restmoney
            inner join user_info on user_restmoney.UserId=user_info.Id
            where EXISTS (select 1 from (
            select DISTINCT user_restmoney.GroupId
            from user_info
            inner join dev_regist on user_info.Id=dev_regist.UserId
            inner join (select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
            user_restmoney.Id as GroupId
            from user_restmoney
            where user_restmoney.GroupId=0
            UNION
            select user_restmoney.UserId,user_restmoney.AgentId,user_restmoney.CustomerType,
            re.GroupId
            from user_restmoney
            INNER JOIN user_restmoney as re on re.Id=user_restmoney.GroupId
            where user_restmoney.GroupId>0)as user_restmoney
            on user_restmoney.UserId=dev_regist.UserId
            and user_restmoney.AgentId=dev_regist.AgentId
            and user_restmoney.CustomerType=dev_regist.CustomerType
            where user_restmoney.AgentId = $agent->key
             and dev_regist.AgentId = $agent->key and not exists
            (select DevNo from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
            and dev_regist.DevNo not in ('2080111157','2079111335',
            '2080111168','2079111324','2079111234','2080111270',
            '2810000021','2081111136','2085111118','2081111338')
            )as temp
            where GroupId=user_restmoney.Id) ORDER BY State asc,SendWaterTime asc
            ")->asArray()->all();

            $datas= json_encode(['datas'=>$datas]);
        }
//        var_dump($datas);exit;
        return $this->renderPartial('send-water',['datas'=>$datas]);
    }

    //查看电子水票详情
     public function actionSendWaterDetail(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }

        $UserId=Yii::$app->request->get('UserId');
        $CustomerType=Yii::$app->request->get('CustomerType');
        $AgentId=Yii::$app->request->get('AgentId');

        if($UserId==''||$CustomerType==''||$AgentId==''){
            return json_encode(['state'=>-1,'mas'=>'参数错误']);
        }
        
        //基本信息
        $BaseInfo=yii\db\ActiveRecord::findBySql("select user_info.Name,dev_regist.RowTime,user_info.HeadPortrait,
user_info.Tel,dev_regist.Address,dev_regist.RoomNo,user_info.SendTime,user_restmoney.RestWater,user_restmoney.RestMoney
from user_restmoney
inner join dev_regist on dev_regist.UserId=user_restmoney.UserId
and dev_regist.CustomerType=user_restmoney.CustomerType and dev_regist.AgentId=user_restmoney.AgentId
inner join user_info on user_info.Id=user_restmoney.UserId
where not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
and user_restmoney.UserId='$UserId' and user_restmoney.CustomerType=$CustomerType and user_restmoney.AgentId=$AgentId")->asArray()->one();
//var_dump($BaseInfo);exit;
        //表格数据（充值记录、送水记录）(加上了时间限制，设备（非初始化）登记时间后的记录)
        //充值记录
        $recharge_log=yii\db\ActiveRecord::findBySql("select user_recharge_log.RowTime,user_recharge_log.RestMoney,
        user_recharge_log.PayType,PayMoney,user_recharge_log.OutOrIn,user_info.Name as GroupMemberName
        from user_recharge_log
        left join user_restmoney on user_restmoney.Id=user_recharge_log.GroupMemberId
        left join user_info on user_restmoney.UserId=user_info.Id
        where user_recharge_log.UserId='$UserId' and user_recharge_log.CustomerType=$CustomerType
        and user_recharge_log.AgentId=$AgentId and user_recharge_log.RowTime >= '{$BaseInfo['RowTime']}'")->asArray()->all();
        //送水记录
        $send_log=yii\db\ActiveRecord::findBySql("select distinct send_water_log.Id,send_water_log.SendTime as RowTime,
send_water_log.FinishTime,send_water_log.RestMoney,brands.BrandName,goods.name as GoodsName,
send_water_log.Volume,send_water_log.Amount,send_water_log.Price,send_water_log.State,
send_water_log.From
from send_water_log
inner JOIN brands on brands.BrandNo=send_water_log.WaterBrandNo
inner JOIN goods on goods.id=send_water_log.WaterGoodsId
where send_water_log.UserId='$UserId' and send_water_log.CustomerType=$CustomerType
and send_water_log.AgentId=$AgentId and send_water_log.RowTime >= '{$BaseInfo['RowTime']}'")->asArray()->all();
//        var_dump($recharge_log);exit;
        $datas=array_merge($recharge_log,$send_log);

        if ($datas && count($datas) > 1) {//默认降序排序
            //排序

            $sort = array(
                'direction' => 'SORT_DESC', //排序顺序标志 SORT_DESC 降序；SORT_ASC 升序
                'field' => 'RowTime',       //RowTime
            );
            $arrSort = array();
            foreach ($datas AS $uniqid => $row) {
                foreach ($row AS $key => $value) {
                    $arrSort[$key][$uniqid] = $value;
                }
            }
            if ($sort['direction']) {
                array_multisort($arrSort[$sort['field']], constant($sort['direction']), $datas);
            }
        }
         //扫一扫参数
         $saoma_data=$this->GetSignPackage();
//        var_dump($datas);exit;
        return $this->renderPartial('send-water-detail', ['BaseInfo'=>json_encode($BaseInfo),'datas'=>json_encode($datas),'UserId'=>$UserId,'CustomerType'=>$CustomerType,'AgentId'=>$AgentId,'saoma_data'=>$saoma_data]);
    }

    //将未完成送水改成已完成
    public function actionUpdateState(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
//             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return json_encode(['state'=>-1,'msg'=>"请登陆"]);
         }

        $ids=Yii::$app->request->get('ids');
        if(!$ids){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $transaction=Yii::$app->db->beginTransaction();
        $now=date('Y-m-d H:i:s');
        try{
            $sql="update send_water_log set State=2,FinishTime='$now' where State=1 and Id in($ids)";
            $re=Yii::$app->db->createCommand($sql)->execute();
            if(!$re){
                throw new yii\base\Exception('配送状态修改失败');
            }
            //获取查询账户的 三条件
            $data=yii\db\ActiveRecord::findBySql("select UserId,AgentId,CustomerType
                from send_water_log where Id in ($ids)")->asArray()->one();

            if($data){
                //修改账户状态
                $state=1;//默认需送水
                //状态修改成功后，判断是否还有待确认的记录
                $data2=yii\db\ActiveRecord::findBySql("select Id
            from send_water_log where State=1 and UserId='{$data['UserId']}' and Id not in ($ids)
            and AgentId={$data['AgentId']} and CustomerType={$data['CustomerType']}")->asArray()->one();

                if(!$data2){//没有待确认的状态

                    //获取账户信息
                    $account=yii\db\ActiveRecord::findBySql("select Id,State,SendWaterTime from user_restmoney
                where UserId='{$data['UserId']}' and AgentId={$data['AgentId']} and CustomerType={$data['CustomerType']}")->asArray()->one();
                    if($account){
                        //判断预计送水时间是否大于 往后推3天的日期
                        $after_3_day=date("Y-m-d",strtotime("+3 day"));//往后推3天的日期
                        if($account['SendWaterTime']=='近期还没有用水'||$account['SendWaterTime']>$after_3_day){
                            $state=3;//已完成
                        }
                        if($state!=$account['State']){
                            //修改状态
                            $sql="update user_restmoney set State=$state where Id={$account['Id']}";
                            $re=Yii::$app->db->createCommand($sql)->execute();
                            if(!$re){
                                throw new yii\base\Exception('账户状态修改失败');
                            }
                        }

                    }
                }

            }

            $transaction->commit();
            return json_encode(['state'=>0]);
        }catch (yii\base\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }

    }

    //送水
    public function actionCreateSendWater(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }

        $UserId=Yii::$app->request->get('UserId');
        $CustomerType=Yii::$app->request->get('CustomerType');
        $AgentId=Yii::$app->request->get('AgentId');
        if($UserId==''||$CustomerType==''||$AgentId==''){
            return json_encode(['state'=>-1,'mas'=>'参数错误']);
        }
        //获取该服务中心的水品牌
        $water_brand=yii\db\ActiveRecord::findBySql("select brands.BrandNo,brands.BrandName from agent_stock
INNER JOIN goods on goods.id=agent_stock.goods_id
INNER JOIN brands on brands.BrandNo=goods.brand_id
where agent_stock.agent_id=$AgentId and brands.CategoryId=1 group by brands.BrandNo")->asArray()->all();
        //水商品
        $water_goods=yii\db\ActiveRecord::findBySql("select goods.`name`,goods.brand_id from agent_stock
INNER JOIN goods on goods.id=agent_stock.goods_id
where agent_stock.agent_id=$AgentId
and goods.category_id=1 group by goods.`name`")->asArray()->all();
        //容量
        $water_volume=yii\db\ActiveRecord::findBySql("select goods.`name`,goods.brand_id,goods.volume from agent_stock
INNER JOIN goods on goods.id=agent_stock.goods_id
where agent_stock.agent_id=$AgentId
and goods.category_id=1 ")->asArray()->all();

        //剩余金额
        $rest_money=0;
        $data=yii\db\ActiveRecord::findBySql("select RestMoney from user_restmoney where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId")->asArray()->one();
        if($data){
            $rest_money=$data['RestMoney'];
        }
        //上次送水商品
        $last_send=yii\db\ActiveRecord::findBySql("
        select send_water_log.WaterBrandNo,goods.name as GoodsName,
        send_water_log.Volume
        from send_water_log
        inner join goods on goods.id=send_water_log.WaterGoodsId
        where UserId='$UserId' and AgentId=$AgentId
        and CustomerType=$CustomerType ORDER BY RowTime DESC LIMIT 1")->asArray()->one();

        return $this->renderPartial('create-send-water',[
            'datas'=>json_encode([
                'UserId'=>$UserId,
                'CustomerType'=>$CustomerType,
                'AgentId'=>$AgentId,
                'rest_money'=>$rest_money,//剩余金额
                'water_brand'=>$water_brand,
                'water_goods'=>$water_goods,
                'water_volume'=>$water_volume,
                'last_send'=>$last_send,
            ])

        ]);

    }

    //ajax 获取对应的库存和单价
    public function actionStockPrice(){
        $UserId=$this->getParam('UserId');
        $CustomerType=$this->getParam('CustomerType');
        $AgentId=$this->getParam('AgentId');
        $brand_id=$this->getParam('brand_id');
        $water_name=$this->getParam('water_name');
        $water_volume=$this->getParam('water_volume');
        if($UserId==''||$CustomerType==''||$AgentId==''||$brand_id==''||$water_name==''||$water_volume==''){
            return json_encode(['state'=>-1,'mas'=>'参数错误']);

        }
        //商品id
        $data=yii\db\ActiveRecord::findBySql("select id from goods
where category_id=1 and `name`='$water_name' and brand_id='$brand_id' and volume=$water_volume")->asArray()->one();
        if(!$data){
            return json_encode(['state'=>-1,'mas'=>'该商品不存在']);
        }
        $goods_id = $data['id'];

        //获取单价
//        $price=yii\db\ActiveRecord::findBySql("select realprice from agent_goods where agent_id=$AgentId and goods_id=$goods_id")->asArray()->one();
//        if(!$price){
//            return json_encode(['state'=>-1,'mas'=>'该服务中心没有此商品']);
//        }

//------代理商送水自定义水价----------
        $user_goods_price=yii\db\ActiveRecord::findBySql("select Price from user_goods_price where UserId='$UserId' and GoodsId=$goods_id")->asArray()->one();
        if($user_goods_price){
            $result['water_price']=$user_goods_price['Price'];//单价
        }else{
            $result['water_price']='';//单价
        }

//--------------

        //单价
//        $result['water_price']=$price['realprice'];
//----------获取库存----------------------

        //判断是否有库存
        $stock_data=yii\db\ActiveRecord::findBySql("
            select stock from agent_stock
            where agent_id=$AgentId
            and goods_id=$goods_id
            ")->asArray()->one();
        if(!$stock_data){
            return json_encode(['state'=>-1,'msg'=>'该商品没有库存']);
        }
        //库存
        $result['water_stock']=$stock_data['stock'];
//--------库存-----------
        return json_encode(['state'=>0,'data'=>$result]);
    }

    //保存送水
    public function actionSaveSendWater(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             return json_encode(['state'=>-1,'mas'=>'请登陆']);
         }

        $UserId=$this->getParam('UserId');
        $CustomerType=$this->getParam('CustomerType');
        $AgentId=$this->getParam('AgentId');
        $brand_id=$this->getParam('brand_id');//品牌
        $water_name=$this->getParam('water_name');//名称
        $water_volume=$this->getParam('water_volume');//容量
        $amount=$this->getParam('amount');//数量
        $price=$this->getParam('price');//单价
        $use_money=$this->getParam('use_money');//合计
        $rest_money=$this->getParam('rest_money');//余额
        $send_time=$this->getParam('send_time');//预计送水时间
        if($UserId==''||$CustomerType==''||$AgentId==''||$brand_id==''||$water_name==''||$water_volume==''||
            $amount==''||$price==''||!is_numeric($price)||$price<0||$use_money==''||$rest_money==''
            ||floor($amount)!=$amount||$amount<1){
            return json_encode(['state'=>-1,'mas'=>'参数错误']);
        }

        //商品id
        $good=yii\db\ActiveRecord::findBySql("select id from goods
where category_id=1 and `name`='$water_name' and brand_id='$brand_id' and volume=$water_volume")->asArray()->one();

        if(!$good){
            return json_encode(['state'=>-1,'mas'=>'该商品不存在']);
        }
        $goods_id=$good['id'];
        //事务
        $transaction=\Yii::$app->db->beginTransaction();
        try{

//------是否修改了价格----
        $sql_price='';
        $now=date('Y-m-d H:i:s');
        $user_goods_price=yii\db\ActiveRecord::findBySql("select Id,Price from user_goods_price where UserId='$UserId' and GoodsId=$goods_id")->asArray()->one();
        if($user_goods_price){//不是第一次填写价格
            if($user_goods_price['Price']!=$price){//修改了价格
                //保存修改
                $sql_price="update user_goods_price set Price=$price,UpdateTime='$now' where Id={$user_goods_price['Id']}";
            }
        }else{//第一次填写价格
            //插入价格
            $sql_price="insert into user_goods_price (`UserId`,`GoodsId`,`Price`,`RowTime`) values('$UserId',$goods_id,$price,'$now')";
            //只有第一次修改才会将之前的送水记录价格刷新
            //如果这次自定义填写的价格和之前送水的价格不一致（之前是取的店铺的价格），
            //将之前该商品的送水记录修改单价、使用金额、剩余金额
            //修改账户剩余金额
            $old_send_price=yii\db\ActiveRecord::findBySql("
            select Id,Amount,Price from send_water_log
            where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId
            and WaterGoodsId=$goods_id and Price <> $price")->asArray()->one();
            if($old_send_price){//有价格不一致的
                //修改所有的记录的单价、使用金额、剩余金额
                $all_send=yii\db\ActiveRecord::findBySql("
                select Id,WaterGoodsId,Amount,Price,UseMoney,RestMoney from send_water_log
                where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId
                 order by RowTime asc")->asArray()->all();//and WaterGoodsId=$goods_id
                //拼接sql
                $id_str='';
                $str1='';//UseMoney
                $str2='';//RestMoney
                $str3='';//Price
                $tag=0;
                $Different=0;//修改单价后使用金额的差值和
                foreach($all_send as $v){
                    $tag++;
                    if($id_str){
                        $id_str.=','.$v['Id'];
                    }else{
                        $id_str.=$v['Id'];
                    }

                    if($v['WaterGoodsId']==$goods_id){
                        $new_price=$price;//新的价格
                    }else{
                        $new_price=$v['Price'];
                    }
                    $NewUseMoney=$v['Amount']*$new_price;//新的使用金额
                    $Different+=$NewUseMoney-$v['UseMoney'];//修改单价后使用金额的差值和
                    $NewRestMoney=$v['RestMoney']-$Different;//新的余额
                    //拼接sql
                    $str1.=" WHEN {$v['Id']} THEN $NewUseMoney ";////UseMoney
                    $str2.=" WHEN {$v['Id']} THEN $NewRestMoney ";//RestMoney
                    $str3.=" WHEN {$v['Id']} THEN $new_price ";//Price

                    //批量修改 1000条执行一次
                    if($tag==1000){
                        //修改账户
                        $sql="update send_water_log set UseMoney = CASE Id $str1 END,RestMoney = CASE Id $str2 END,Price = CASE Id $str3 END where Id in ($id_str)";
                        //执行更新
                        $re=Yii::$app->db->createCommand($sql)->execute();
                        if(!$re){
                            throw new yii\base\Exception('更新价格失败');
                        }
                        $tag=0;
                        $str1='';
                        $str2='';
                        $str3='';
                        $id_str='';
                    }
                }
                if($tag > 0){
                    //修改账户
                    $sql="update send_water_log set UseMoney = CASE Id $str1 END,RestMoney = CASE Id $str2 END,Price = CASE Id $str3 END where Id in ($id_str)";
                    //执行更新
                    $re=Yii::$app->db->createCommand($sql)->execute();
                    if(!$re){
                       throw new yii\base\Exception('更新价格失败');
                    }
                }
                //修改账户余额
                $sql="update user_restmoney set RestMoney =RestMoney-$Different where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId";
                //执行更新
                $re=Yii::$app->db->createCommand($sql)->execute();
                if(!$re){
                    throw new yii\base\Exception('更新价格后修改账户余额失败');
                }
            }
        }

//------------------

        //获取数据库此商品的的价格
//        $data=yii\db\ActiveRecord::findBySql("select stock,realprice from agent_goods where agent_id=$AgentId and goods_id=$goods_id")->asArray()->one();
//        if(!$data){
//            return json_encode(['state'=>-1,'mas'=>'该服务中心没有该商品']);
//        }
//        $price=$data['realprice'];
        //获取此时账户的余额、总送水量、上次送水量、上传送水日期
        $account=yii\db\ActiveRecord::findBySql("select RestMoney,TotalSendV,LastSendV,LastSendDate,
        AverageUse,SendWaterTime,RestWater,LastSendTime
        from user_restmoney
        where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId")->asArray()->one();
        if(!$account){
                throw new yii\base\Exception('该用户还未创建电子账户');
//            return json_encode(['state'=>-1,'mas'=>'该用户还未创建电子账户']);
        }
        $total_money=$account['RestMoney'];//余额

        //余额
        $use_money=$amount*$price;
        $rest_money=$total_money-$use_money;//新的余额
        if($rest_money < -1000){//最多欠1000
            throw new yii\base\Exception('余额不能小于-1000');
//            return json_encode(['state'=>-1,'mas'=>'余额不能小于-1000']);
        }

        $now=date('Y-m-d H:i:s',time());
        $from=2;//服务中心  1 微信端（客户），2 服务中心，3 太极兵
        $sql2='';
        //保存送水记录 state 1 已配送，2 已完成
        //如果添加的送水记录在最后一次送水之前
        $log=yii\db\ActiveRecord::findBySql("select SendTime from send_water_log
        where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId
        order by SendTime desc limit 1")->asArray()->one();
        if($log&&$log['SendTime'] > $send_time){
            //添加的送水记录在最后一次送水之前(补之前的数据)
            //将后面的送水记录的剩余金额修正
            //获取这次送水记录，前面一次送水的剩余金额
            $log2=yii\db\ActiveRecord::findBySql("select RestMoney from send_water_log
            where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId
            and SendTime < '$send_time'
            order by SendTime desc limit 1")->asArray()->one();
            if($log2){
                $rest_money2=$log2['RestMoney']-$use_money;
            }else{
                //总的充值记录-本次送水记录
                $recharge_money=yii\db\ActiveRecord::findBySql("select sum(PayMoney) as total
                from user_recharge_log where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId")->asArray()->one();
                $rest_money2=$recharge_money['total']-$use_money;
            }
            $sql1="insert into send_water_log (UserId,CustomerType,AgentId,WaterBrandNo,WaterGoodsId,Volume,Amount,UseMoney,RestMoney,SendTime,FinishTime,Price,State,RowTime,`From`)
              values('$UserId',$CustomerType,$AgentId,'$brand_id',$goods_id,$water_volume,$amount,$use_money,$rest_money2,'$send_time',NULL,$price,1,'$send_time',$from)";
            //修改后面的送水记录的剩余金额
            $sql2="update send_water_log set RestMoney=RestMoney-$use_money
            where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId
            and SendTime > '$send_time'";

        }else{
            $sql1="insert into send_water_log (UserId,CustomerType,AgentId,WaterBrandNo,WaterGoodsId,Volume,Amount,UseMoney,RestMoney,SendTime,FinishTime,Price,State,RowTime,`From`)
              values('$UserId',$CustomerType,$AgentId,'$brand_id',$goods_id,$water_volume,$amount,$use_money,$rest_money,'$send_time',NULL,$price,1,'$now',$from)";
        }


//-----------------库存逻辑--------------------------

        //判断是否有库存
        $stock_data=yii\db\ActiveRecord::findBySql("
            select id,stock,factory_id,row_time,goods_id
            from agent_stock
            where agent_id=$AgentId and goods_id=$goods_id
            ")->asArray()->one();

        //---如果是补之前的记录，判断是否修改库存-----------
        if(!$stock_data||$send_time <= $stock_data['row_time']){
            //补送水记录，且在第一次添加库存之前
            //不做库存逻辑
            $sql_str1='';
            $sql_str2='';

        }else{

            if(!$stock_data){
                throw new yii\base\Exception('该商品没有库存');
//                return json_encode(['state'=>-1,'mas'=>'该商品没有库存']);
            }
            if($stock_data['stock']<$amount){
                throw new yii\base\Exception('库存不足');
//                return json_encode(['state'=>-1,'mas'=>'库存不足']);
            }

            //添加出库记录
            //获取累计入库总数量、剩余库存数量
            $total_rest=$this->GetTotalAndRestStock($AgentId,$stock_data['goods_id'],$stock_data['factory_id']);
            $total=$total_rest['total'];
            $rest_stock=$total_rest['rest_stock']-$amount;
            if($rest_stock<0) {
                throw new yii\base\Exception('库存不足');
//                return json_encode(['state'=>-1,'mas'=>'库存不足']);
            }
            //添加出库记录
            $sql_str1=" insert into agent_stock_log
                (agent_id,factory_id,goods_id,action_type,num,rest_stock,total,remark,row_time)
                values($AgentId,{$stock_data['factory_id']},{$stock_data['goods_id']},2,$amount,$rest_stock,$total,2,'$now')";


            //修改库存
            $sql_str2="update agent_stock set stock=stock-$amount,update_time='$now' where id={$stock_data['id']}";

        }

        //-----------------------------


//--------库存逻辑------------------------------

        //修改余额、操作时间、送水容量
        //修改账户余额、送水量、状态（已配送）
        $SendV=$amount*$water_volume;//送水容量
        $send_date=date('Y-m-d',strtotime($send_time));
        $today_date=date('Y-m-d');
        $AverageUse=$account['AverageUse'];//平均用水量


        //当天或3天内送水，就是一次送水(很多袋)，送水量相加
        $day_after_1='';
        if($account['LastSendDate']&&$account['LastSendTime']){
            //上次送水日期向后推3天的日期
            $day_after_1=date("Y-m-d",strtotime("+1 day",strtotime($account['LastSendDate'])));
        }


        $SendWaterTime='近期还没有用水';
        if($AverageUse > 0){
            //计算预计送水时间
            //还可以用几天
            $days=floor($SendV/$AverageUse);
            if($send_time < $day_after_1){
                $days=floor(($account['LastSendV']+$SendV)/$AverageUse);
            }

            $SendWaterTime=date("Y-m-d",strtotime("+$days day",strtotime($send_time)));

        }



        //有上次送水日期和时间（送过水的）
        if($account['LastSendDate']&&$account['LastSendTime']){
            //这次送水在上次送水后
            if($send_time >= $account['LastSendTime']){
                //判断是累加还是更新上次送水量、送水时间
                //距上次送水在1天内，算做一次（本次送水量累加）
                if($send_time <= $day_after_1){
                    $sql3=" update user_restmoney set RestMoney=$rest_money,TotalSendV=TotalSendV+$SendV,RestWater=RestWater+$SendV,LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=LastSendV+$SendV,State=2
                    where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId";
                }else{//更新
                    $sql3=" update user_restmoney set RestMoney=$rest_money,TotalSendV=TotalSendV+$SendV,RestWater=$SendV,LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=$SendV,State=2,LastSendDate='$send_date',LastSendTime='$send_time'
                    where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId";
                }
            }else{//这次送水在上次送水前（补之前的记录），只更新余额
                $sql3=" update user_restmoney set RestMoney=$rest_money,TotalSendV=TotalSendV+$SendV,LastActTime='$now'
             where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId";
            }

        }else{//没有送过
            $sql3=" update user_restmoney set RestMoney=$rest_money,TotalSendV=TotalSendV+$SendV,RestWater=$SendV,LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=$SendV,State=2,LastSendDate='$send_date',LastSendTime='$send_time'
                    where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$AgentId";
        }



            //是否需要修改价格
            if($sql_price){
                $res= \Yii::$app->db->createCommand($sql_price)->execute();
                if(!$res){
                    throw new \Exception('修改价格失败！');
                }
            }

            //保存送水数据
            $res= \Yii::$app->db->createCommand($sql1)->execute();
            if(!$res){
                throw new \Exception('操作失败1！');
            }
            //是否更新后面送水记录的余额
            if($sql2){
                $res= \Yii::$app->db->createCommand($sql2)->execute();
                if(!$res){
                    throw new \Exception('操作失败2！');
                }
            }
//-----------库存-------------------
            //添加出库记录
            if($sql_str1){
                $res= \Yii::$app->db->createCommand($sql_str1)->execute();
                if(!$res){
                    throw new yii\db\Exception('添加出库记录失败');
                }
            }
            if($sql_str2){
                //修改库存
                $res= \Yii::$app->db->createCommand($sql_str2)->execute();
                if(!$res){
                    throw new yii\db\Exception('修改库存失败');
                }
            }

//------------库存---------------------

            //修改余额、操作时间、总送水量
            $r= \Yii::$app->db->createCommand($sql3)->execute();
            if(!$r){
                throw new \Exception('操作失败3！');
            }

            $transaction->commit();
            return json_encode(['state'=>0,'mas'=>"保存成功"]);
        }catch (\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'mas'=>$e->getMessage()]);
        }

    }

    // 地图
    public function actionMark(){
        $address=$this->getParam('address');
        return $this->renderPartial('mark',['address'=>$address]);
    }

    //提示此功能暂未开放
    public function actionOntOpen(){
        return $this->renderPartial('ont-open');
    }

    //前端要求
    public function actionChartType()
    {
        $userdatax=$this->getParam('userdatax');
        $userdatay=$this->getParam('userdatay');

        return $this->renderPartial("chart-type",['userdatax'=>$userdatax,'userdatay'=>$userdatay]);
    }


    //获取下拉框数据
    public function GetSelect(){
        //验证是否已登陆
         if(!$this->checkAgentLogin()){
             yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
             return $this->redirect(["/agent/login-page"]);
         }

        $res=(new AgentGetDevFactoryApi())->post([]);
        $ares=(new AddressApi())->get();
        $result=(new BrandGoodsApi())->getbrandgoods();//品牌和型号
        $data=[];
        $Adata=[];
        $Bdata=[];
        if($res->state==0){
            $data=$res->result;
        }
        if($ares->state==0){
            $Adata=$ares->result;
        }
        if($result){
            if($result->state==0){
                $Bdata=$result->result;//品牌和型号
            }
        }
        $agent=Yii::$app->session->get("agent_user");//登陆者信息
        //获取该服务中心的入网属性
        $use_type='';
        $agent_address='';

        if($agent&&property_exists($agent,'key')){
            $agent_codes=yii\db\ActiveRecord::findBySql("select code from agent_usetype where agent_id=$agent->key")->asArray()->one();
            $codes='';
            if($agent_codes){
                $codes=$agent_codes['code'];
            }
            if($codes){
                $use_type=yii\db\ActiveRecord::findBySql("select code,use_type from agent_usetype_code where code in ($codes)")->asArray()->all();
            }
            $agent_address=yii\db\ActiveRecord::findBySql("select Province,City,Area from agent_info where Id=$agent->key")->asArray()->one();

        }
        return json_encode(['data'=>$data,'Adata'=>$Adata,'Bdata'=>$Bdata,'use_type'=>$use_type,'agent_address'=>$agent_address]);
    }

    //判断该用户是否登记过同样信息的设备(返回到第二个登记页面)
    //地址是否重复、电话是否重复
    public function CheckSameInfo($AgentId,$data){
//        $Dev=yii\db\ActiveRecord::findBySql("select DevNo from dev_regist
//where AgentId=$AgentId and CustomerType={$data['customertype']}
//and Province='{$data['Province']}' and City='{$data['City']}'
//and Area='{$data['area']}' and Address='{$data['Address']}'
//and RoomNo='{$data['RoomNo']}'
//and brand_id='{$data['brandid']}' and goods_id={$data['goodsid']}
//")->asArray()->one();
        //地址是否重复
        $Address=yii\db\ActiveRecord::findBySql("select Address from dev_regist
where Address='{$data['Address']}' and AgentId > 0
and not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
")->asArray()->one();

        //电话是否重复
        $msg='';
        if(array_key_exists('Tel',$data)){
            $result=json_decode($this->CheckTel($data['Tel']),true);
            if($result['state']==-1){
                $msg=$result['msg'];
            }
        }
        if($Address||$msg){
            //返回登记的第二个页面
            $select=json_decode($this->GetSelect());
            return ['datas'=>[
                'state'=>-1,
                'mag'=>$Address?'地址重复':$msg,
                'info'=>'',
                'data'=>$select->data,
                'adata'=>$select->Adata,
                'bdata'=>$select->Bdata,
                'use_type'=>$select->use_type,
                'agent_address'=>$select->agent_address,
                'DevNo'=>'',
                'BaseInfo'=>'',
                'user_base'=>$data,

                'coordinate'=>json_encode([
                    'Name'=>'',
                    'state'=>'',
                    'jsonobj'=>'',
                    'Lng'=>'',
                    'Lat'=>''])
            ]
            ];
        }else{
            return false;
        }

    }


    //ajax请求,判断手机号是否重复（酒店登记不限制）
    //是否是白名单
    public function actionCheckTel(){
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");

        if(Yii::$app->request->isAjax) {
            $tel = Yii::$app->request->get('tel');//电话
            if(!$tel){
                return json_encode(['state'=>-1,'msg'=>'参数错误']);
            }

            if($agent&&property_exists($agent,'key')){
                //判断该服务中心是否有设置该电话为白名单，且登记数量未达到上限
                //if($this->CheckWhiteList($agent->key,$tel)){
                //    return json_encode(['state'=>0]);
                //}


                //获取登陆者信息
                $UserInfo=$this->getUserInfoByKey($agent->key);
                //酒店登记不用限制电话
                if($UserInfo['Level']==8){
                    return json_encode(['state'=>0]);
                }
            }

            //是否有该电话的用户信息
            $msg=$this->CheckTel($tel);
            return $msg;

        }
        return json_encode(['state' => -1, 'msg' => '请求方式有误']);

    }

    //验证电话
    public function CheckTel($tel){
        //是否有该电话的用户信息
        $data=yii\db\ActiveRecord::findBySql("select Id from user_info where Tel='$tel'")->asArray()->one();
        if($data){//有该电话的用户信息
            //该用户是否有正常或未激活的设备
            $dev=yii\db\ActiveRecord::findBySql("
                select DevNo from dev_regist
                where AgentId > 0 and UserId='{$data['Id']}'
                and not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
                ")->asArray()->all();
            if($dev){
                return json_encode(['state' => -1, 'msg' => '该手机号已经登记了设备，请更换']);

            }
        }

        return json_encode(['state'=>0]);
    }

    //最新登记流程---------------------
    public function actionNewRegister(){

        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
            return $this->redirect(["/agent/login-page"]);
        }

        $agent=Yii::$app->session->get("agent_user");//登陆者信息
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'未获取到登陆信息']);
        }

        //二维码参数，酒店登记才有
        $CodeNumber=Yii::$app->request->get('CodeNumber');
        //获取该服务中心的入网属性
        $use_type='';
        $agent_codes=yii\db\ActiveRecord::findBySql("select code from agent_usetype where agent_id=$agent->key")->asArray()->one();
        $codes='';
        if($agent_codes){
            $codes=$agent_codes['code'];
        }
        if($codes){
            $use_type=yii\db\ActiveRecord::findBySql("select code,use_type from agent_usetype_code where code in ($codes)")->asArray()->all();
        }
        //服务中心地址
        $agent_address=yii\db\ActiveRecord::findBySql("select Province,City,Area,BaiDuLat,BaiDuLng from agent_info where Id=$agent->key")->asArray()->one();

        //下拉框地址数据
        $ares=(new AddressApi())->get();
        $Adata=[];
        if($ares->state==0){
            $Adata=$ares->result;
        }

        //扫一扫参数
        $saoma_data=$this->GetSignPackage();

        //csrf验证
        $csrf=Yii::$app->request->csrfToken;
        return $this->renderPartial("new-register",
            [
                    'Adata'=>$Adata,
                    'use_type'=>$use_type,
                    'saoma_data'=>$saoma_data,
                    'agent_address'=>$agent_address,
                    'CodeNumber'=>$CodeNumber,
                    'csrf'=>$csrf,

            ]);
    }

    //验证地址是否重复、电话是否登记过
    public function actionCheckAddressAndTel(){

        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            yii::$app->session->set("last_url",Yii::$app->controller->action->uniqueId);
            return $this->redirect(["/agent/login-page"]);
        }

        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'未获取到登陆信息']);
        }

        $address = Yii::$app->request->get('address');//详细地址
        $tel = Yii::$app->request->get('tel');//电话
        if(!$address||!$tel){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }

        //酒店(或电话白名单)登记不用验证电话是否重复---------------------------------------
        //获取登陆者信息
        $UserInfo=$this->getUserInfoByKey($agent->key);
        //是否是酒店登记(或电话白名单)
//        if(($UserInfo&&$UserInfo['Level']==8)||$this->CheckWhiteList($agent->key,$tel)) {//酒店登记(或电话白名单)
        if($UserInfo&&$UserInfo['Level']==8) {//酒店登记(或电话白名单)

            //地址是否重复
            $data=yii\db\ActiveRecord::findBySql("select Address from dev_regist
where Address='$address' and AgentId > 0
and not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
")->asArray()->one();
            if($data){
                return json_encode(['state'=>-1,'msg'=>'地址重复']);
            }
            return json_encode(['state'=>0]);
        }
        //------------------------------------

        //地址是否重复
        $data=yii\db\ActiveRecord::findBySql("select Address from dev_regist
where Address='$address' and AgentId > 0
and not exists (select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
")->asArray()->one();
        //验证电话是否登记过设备
        $result=json_decode($this->CheckTel($tel),true);
        if($data&&$result['state']==-1){
            return json_encode(['state'=>-1,'msg'=>'该电话已登记过设备且地址重复']);
        }
        if($data&&$result['state']==0){
            return json_encode(['state'=>-1,'msg'=>'地址重复']);
        }
        if(!$data&&$result['state']==-1){
            return json_encode(['state'=>-1,'msg'=>'该电话已登记过设备']);
        }
        return json_encode(['state'=>0]);


    }

    //保存登记信息，生成设备编号,创建电子账户，充值记录
    public function actionSaveRegister(){
        $data=Yii::$app->request->get('data');//登记信息
        if(!$data){
            return json_encode(['state'=>-1,'msg'=>'登记信息跑丢了']);
        }
        //方便后面做库存逻辑
        if(!array_key_exists('stock_id',$data)){
            return json_encode(['state'=>-1,'msg'=>'信息不完整']);
        }
        //登记设备的库存id
        $stock_id=$data['stock_id'];
        unset($data['stock_id']);

        //保存
        $result=(new AgentRegistApi())->post($data);
        if ($result->state != 0 && empty($result->msg)) {
            $msg = $this->getMsgByErrorCode($result->state);
            return json_encode(['state'=>-1,'msg'=>$msg]);
        }

        $DevNo=$result->result->devNo;
        //保存备注
        if($data['Tel']&&$data['remark']){
            Yii::$app->db->createCommand("update user_info set Remark='{$data['remark']}' where Tel='{$data['Tel']}'")->execute();
        }


        //创建电子账户，充值记录，减去对应库存
        $dev=yii\db\ActiveRecord::findBySql("select AgentId,UserId,UseType,CustomerType,brand_id,goods_id from dev_regist where DevNo='$DevNo'")->asArray()->one();
        if(!$dev){
            return json_encode(['state'=>-1,'msg'=>'设备编号生成失败，请重新生成']);
        }

        //登记时购水套餐里的水费
        $water_charge = yii\db\ActiveRecord::findBySql("select water_charge from agent_usetype_code where code={$dev['UseType']}")->asArray()->one();
        if (!$water_charge) {
            return json_encode(['state' => -1, 'msg' => '购水套餐不存在']);
        }
        $buy_water_money = $water_charge['water_charge'];//登记时购水套餐里的水费

        $user=yii\db\ActiveRecord::findBySql("select Id from user_restmoney where UserId='{$dev['UserId']}' and CustomerType={$dev['CustomerType']} and AgentId={$dev['AgentId']} ")->asArray()->one();
        $now=date('Y-m-d H:i:s',time()+10);
        $transaction=Yii::$app->db->beginTransaction();
        try {
            if (!$user) {//没有电子账户
                //创建电子账户
                $res = Yii::$app->db->createCommand(" insert into user_restmoney (UserId,CustomerType,AgentId,RestMoney,TotalSendV,RestWater,LastActTime,SendWaterTime,AverageUse)
             values ('{$dev['UserId']}',{$dev['CustomerType']},{$dev['AgentId']},0,0,0,'$now','没有送水记录',0)")->execute();
                if(!$res){
                    throw new yii\db\Exception('创建电子账户失败');
                }
            }else{//有电子账户(之前登记了，有初始化了，沿用之前的账户，将账户请零)
                $res = Yii::$app->db->createCommand(" update user_restmoney set RestMoney=0,RestWater=0,
                SendWaterTime='没有送水记录',AverageUse=0,State=1,GroupId=0 where Id={$user['Id']}")->execute();
                if(!$res){
                    throw new yii\db\Exception('初始化账户失败');
                }
            }
            //购水套餐的水费大于0，才进行修改账户、添加充值记录
            if($buy_water_money > 0){
                //建电子账户是否存在
                $account = yii\db\ActiveRecord::findBySql(" select RestMoney,TotalSendV,RestWater,AverageUse,SendWaterTime
            from user_restmoney
            where UserId='{$dev['UserId']}' and CustomerType={$dev['CustomerType']} and AgentId={$dev['AgentId']} ")->asArray()->one();
                if(!$account){
                    throw new yii\db\Exception('建电子账户不存在');
                }
                //1、修改账户
                $res = Yii::$app->db->createCommand(" update user_restmoney set RestMoney={$account['RestMoney']}+$buy_water_money,LastActTime='$now'
             where UserId='{$dev['UserId']}' and CustomerType={$dev['CustomerType']} and AgentId={$dev['AgentId']}")->execute();
                if(!$res){
                    throw new yii\db\Exception('修改电子账户失败');
                }
                //2、充值记录
                $res = Yii::$app->db->createCommand(" insert into user_recharge_log (UserId,CustomerType,AgentId,PayMoney,PayType,RestMoney,RowTime)
             values('{$dev['UserId']}',{$dev['CustomerType']},{$dev['AgentId']},$buy_water_money,1,$buy_water_money+{$account['RestMoney']},'$now')")->execute();
                if(!$res){
                    throw new yii\db\Exception('保存充值记录失败');
                }
            }
//-----库存逻辑----------------
            //修改对应代理商对应商品的库存
            $stock_data=yii\db\ActiveRecord::findBySql("select agent_id,factory_id,goods_id
             from agent_stock where id=$stock_id")->asArray()->one();
            if(!$stock_data){
                throw new yii\db\Exception('没有库存');
            }

            //获取累计数、剩余数量
            $re=$this->GetTotalAndRestStock($stock_data['agent_id'],$stock_data['goods_id'],$stock_data['factory_id']);
            $rest_stock=$re['rest_stock']-1;
            $total=$re['total'];
            //出库记录
            $res = Yii::$app->db->createCommand(" insert into agent_stock_log
                (agent_id,factory_id,bar_code,goods_id,action_type,num,rest_stock,total,remark,row_time)
                values({$stock_data['agent_id']},{$stock_data['factory_id']},'$DevNo',
                {$stock_data['goods_id']},2,1,$rest_stock,$total,4,'$now')")->execute();
            if(!$res){
                throw new yii\db\Exception('保存出库记录失败');
            }
            //修改库存
            $res = Yii::$app->db->createCommand(" update agent_stock set stock=stock-1
             where id=$stock_id")->execute();
            if(!$res){
                throw new yii\db\Exception('修改库存失败');
            }
//-----库存逻辑----------------
            $transaction->commit();
        }catch (yii\db\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }



        return json_encode(['state'=>0,
            'DevNo'=>$DevNo,
            'UserId'=>$dev['UserId'],
            'CustomerType'=>$dev['CustomerType'],
            'AgentId'=>$dev['AgentId'],
        ]);

    }


    //保存登记成功拍照图片
    public function actionSavePicture(){
        //通过这个id可以下载上传到微信服务器上的图片文件，把它保存到自己的服务器中
        $serverId=Yii::$app->request->get('serverId');
        $DevNo=Yii::$app->request->get('DevNo');//设备编号
        if(!$serverId||!$DevNo){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $data=yii\db\ActiveRecord::findBySql("select DevNo from dev_regist where DevNo='$DevNo'")->asArray()->one();
        if(!$data){
            return json_encode(['state'=>-1,'msg'=>'该设备不存在']);
        }

        //设置图片保存的文件路径
        $file_dir='E:/www/yun/static/upload';
//        $file_dir='E:/www/testwww/static/upload';//测试环境的

        $picture_name=$this->GetMedia($serverId,$DevNo,$file_dir);//图片名称
        $file_name='http://www.taijibing.cn/static/upload/'.$picture_name;//图片路径
//        $file_name='http://test.www.taijibing.cn/static/upload/'.$picture_name;//图片路径

        $str=file_get_contents($file_dir.'/'.$picture_name);
        $arr=json_decode($str,true);
        if($arr && array_key_exists('errcode',$arr)){
            if($arr['errcode']==40001){
                $this->AccessTokenLog('上传照片时access_token失效');
                $picture_name=$this->GetMedia($serverId,$DevNo,$file_dir,$is_get_new=1);
                $file_name='http://www.taijibing.cn/static/upload/'.$picture_name;//图片路径
//              $file_name='http://test.www.taijibing.cn/static/upload/'.$picture_name;//图片路径

            }

        }




        //保存上传记录
        $now=date('Y-m-d H:i:s',time());
        Yii::$app->db->createCommand("insert into upload_dev_image_log (DevNo,Image,RowTime) values('$DevNo','$file_name','$now')")->execute();

        //保存到对应设备临时图片（等待确认）
        $re=Yii::$app->db->createCommand("update dev_regist set TempImage='$file_name',ImageState=1 where DevNo='$DevNo'")->execute();
        if(!$re){
            return json_encode(['state'=>-1,'msg'=>'保存图片失败']);
        }
        return json_encode(['state'=>0,'image'=>$file_name]);
    }

    // 从微信下载图片保存并获取地址
    public function GetMedia($media_id,$DevNo,$file_dir,$is_get_new=''){
        $access_token=$this->getAccessToken($is_get_new);
        $url = "http://file.api.weixin.qq.com/cgi-bin/media/get?access_token=".$access_token."&media_id=".$media_id;
        if (!file_exists($file_dir)) {
            mkdir($file_dir, 0777, true);
        }
        $file_name=date('YmdHis').'-'.$DevNo.'.jpg';
        $targetName = $file_dir.'/'.$file_name;
        $ch = curl_init($url); // 初始化
        $fp = fopen($targetName, 'wb'); // 打开写入
        curl_setopt($ch, CURLOPT_FILE, $fp); // 设置输出文件的位置，值是一个资源类型
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_exec($ch);
        curl_close($ch);
        fclose($fp);
        return $file_name;
    }

    //扫描水条码后根据条码获取商品信息、减库存、出库记录、送水记录、账户余额
    public function actionSaveInfoByCode(){

        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'未获取到登陆信息']);
        }

        //水条码编号
        $code=Yii::$app->request->get('code');
        $UserId=Yii::$app->request->get('UserId');
        $AgentId=Yii::$app->request->get('AgentId');
        $CustomerType=Yii::$app->request->get('CustomerType');
        if(!$code||!$UserId||!$AgentId||!$CustomerType){
           return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $arrar_code = explode(',',$code);
        if(!$arrar_code){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $code_data=yii\db\ActiveRecord::findBySql("select distinct Code,GoodsId from wcode_info where GoodsId>0 and UsdUserId is null and Code in ($code)")->asArray()->all();
        if(count($arrar_code)!=count($code_data)){//可能有重复的条码，或有的条码没有GoodsId
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $send_data=yii\db\ActiveRecord::findBySql("select Id from send_water_log where BarCode in ($code)")->asArray()->one();
        if($send_data){
            return json_encode(['state'=>-1,'msg'=>'有送过水的条码']);
        }

        //获取每种商品的数量及对应的价格、品牌
        $goods=yii\db\ActiveRecord::findBySql("
        select wcode_info.GoodsId,count(wcode_info.GoodsId) as num,
        user_goods_price.Price,wcode_info.BrandNo,wcode_info.Volume
        from wcode_info
        INNER JOIN user_goods_price on user_goods_price.GoodsId=wcode_info.GoodsId
        where wcode_info.GoodsId > 0 and wcode_info.Code in ($code)
        and user_goods_price.UserId='$UserId'
        GROUP BY wcode_info.GoodsId")->asArray()->all();
        $total_use_money=0;
        $total_send_volume=0;//总容量
        $goos_id_str='';
        $goods_array=[];
        foreach($goods as $v){
            $total_use_money+=$v['num']*$v['Price'];
            $total_send_volume+=$v['num']*$v['Volume'];
            if($goos_id_str){
                $goos_id_str.=','.$v['GoodsId'];
            }else{
                $goos_id_str.=$v['GoodsId'];
            }
            $goods_array[$v['GoodsId']]=$v;
        }



        $account=yii\db\ActiveRecord::findBySql(" select RestMoney,TotalSendV,RestWater,AverageUse,SendWaterTime,LastSendDate,LastSendV
                from user_restmoney
                where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key ")->asArray()->one();

        if(!$account){
            return json_encode(['state'=>-1,'msg'=>'账户不存在']);
        }
        if($account['RestMoney']-$total_use_money < -1000){
            return json_encode(['state'=>-1,'msg'=>'账户余额不能小于负-1000']);
        }

        //获取每种商品的库存
        $goods_stock_data=yii\db\ActiveRecord::findBySql("
            select id,stock,factory_id,goods_id
            from agent_stock
            where agent_id=$agent->key
            and goods_id in ($goos_id_str) and stock > 0
            ")->asArray()->one();

        if(count($goods_stock_data)!=count($goods)){//有库存等于0 的商品(后厂家不一样的相同商品)
            return json_encode(['state'=>-1,'msg'=>'库存不足']);
        }
        $array_stock=array_column($goods_stock_data,'stock','goods_id');//每种商品对应的剩余库存

        foreach($goods as $v){//已有库存减去送水数量后，库存是否大于0
            if($array_stock[$v['GoodsId']]-$v['num']<0){
                return json_encode(['state'=>-1,'msg'=>'库存不足']);
            }
        }

        $now=date('Y-m-d H:i:s',time());
        $date_now=date('Y-m-d');//当前日期

        //每种商品的累计入库量
        $total_stock=yii\db\ActiveRecord::findBySql("select goods_id,max(total) as total from agent_stock_log where goods_id in ($goos_id_str) and agent_id=$agent->key and action_type=1 GROUP BY goods_id")->asArray()->all();
        $array_total_stock=array_column($total_stock,'total','goods_id');
        //添加出库记录、送水记录
        $sql_stock_out='insert into agent_stock_log (`agent_id`,`factory_id`,`bar_code`,`goods_id`,`action_type`,`num`,`rest_stock`,`total`,`remark`,`row_time`) values';
        $sql_send_water='insert into send_water_log (`UserId`,`CustomerType`,`AgentId`,`WaterBrandNo`,`WaterGoodsId`,`Volume`,`Amount`,`UseMoney`,`RestMoney`,`SendTime`,`Price`,`State`,`RowTime`,`From`,`BarCode`) values';
        $tag=0;
        $array_factory_id=array_column($goods_stock_data,'factory_id','goods_id');//每个商品对应的厂家
       $usemoney=0;
        foreach($code_data as $v){
            $usemoney+=$goods_array[$v['GoodsId']]['Price'];
            $array_stock[$v['GoodsId']]-=1;//每种商品的剩余库存减去每次送水数量
            if($array_stock[$v['GoodsId']]<0)return json_encode(['state'=>-1,'msg'=>'库存不足']);
            if($tag==0){
                $sql_stock_out.="($agent->key,{$array_factory_id[$v['GoodsId']]},'{$v['Code']}',{$v['GoodsId']},2,1,{$array_stock[$v['GoodsId']]},{$array_total_stock[$v['GoodsId']]},2,'$now','{$v['Code']}')";
                $sql_send_water.="('$UserId',$CustomerType,$AgentId,'{$goods_array[$v['GoodsId']]['BrandNo']}',{$v['GoodsId']},{$goods_array[$v['GoodsId']]['Volume']},1,{$goods_array[$v['GoodsId']]['Price']},
                {$account['RestMoney']}-$usemoney,'$now',{$goods_array[$v['GoodsId']]['Price']},1,'$now',2,'{{$v['Code']}}')";
            }else{
                $sql_stock_out.=",($agent->key,{$array_factory_id[$v['GoodsId']]},'{$v['Code']}',{$v['GoodsId']},2,1,{$array_stock[$v['GoodsId']]},{$array_total_stock[$v['GoodsId']]},2,'$now','{$v['Code']}')";
                $sql_send_water.=",('$UserId',$CustomerType,$AgentId,'{$goods_array[$v['GoodsId']]['BrandNo']}',{$v['GoodsId']},{$goods_array[$v['GoodsId']]['Volume']},1,{$goods_array[$v['GoodsId']]['Price']},
                {$account['RestMoney']}-$usemoney,'$now',{$goods_array[$v['GoodsId']]['Price']},1,'$now',2,'{{$v['Code']}}')";
            }

        }

        //拼接修改库存的sql
        $str1='';
        $str2='';
        $stock_id='';
        foreach($goods_stock_data as $v){
            if($stock_id){
                $stock_id.=','.$v['id'];
            }else{
                $stock_id.=$v['id'];
            }
            $str1.=" WHEN {$v['id']} THEN {$array_stock[$v['goods_id']]}-{$goods_array[$v['goods_id']]['num']} ";
            $str2.=" WHEN {$v['id']} THEN '$now' ";
        }

        $sql_update_stock="update agent_stock set stock = CASE id $str1 END,update_time = CASE id $str2 END where id in ($stock_id)";

        //事物
        $transaction=Yii::$app->db->beginTransaction();
        try{
            //添加出库记录失败
            $res=\Yii::$app->db->createCommand($sql_stock_out)->execute();
            if(!$res){
                throw new yii\db\Exception('添加出库记录失败');
            }

            //添加送水记录
            $res=Yii::$app->db->createCommand($sql_send_water)->execute();
            if(!$res){
                throw new yii\db\Exception('保存送水记录失败');
            }

                //修改库存
                $re=Yii::$app->db->createCommand($sql_update_stock)->execute();
                if(!$re){
                    throw new yii\db\Exception('修改库存失败，请重试');
                }



            //修改账户余额、送水量、状态（已配送）

            //当天或1天内送水，就是一次送水(很多袋)，送水量相加
            $day_after_1='';
            if($account['LastSendDate']){
                //上传送水日期向后推3天的日期
                $day_after_1=date("Y-m-d",strtotime("+1 day",strtotime($account['LastSendDate'])));
            }

            $AverageUse=$account['AverageUse'];//平均用水量
            $SendWaterTime='近期还没有用水';
            if($AverageUse > 0){
                //计算预计送水时间
                //还可以用几天
                if($day_after_1){//有送过水
                    if($now > $day_after_1){//没超过一天，两次送水量相加
                        $days=floor(($account['LastSendV']+$total_send_volume)/$AverageUse);
                        $SendWaterTime=date("Y-m-d",strtotime("+$days day",strtotime($account['LastSendDate'])));
                    }else{//超过一天，送水量更新
                        $days=floor(($total_send_volume)/$AverageUse);
                        $SendWaterTime=date("Y-m-d",strtotime("+$days day"));
                    }

                }else{
                    $days=floor(($total_send_volume)/$AverageUse);
                    $SendWaterTime=date("Y-m-d",strtotime("+$days day"));
                }
            }

            if($account['LastSendDate'] && $date_now <= $day_after_1){
                $sql=" update user_restmoney set RestMoney=RestMoney-$total_use_money,TotalSendV=TotalSendV+$total_send_volume,RestWater=RestWater+$total_send_volume,LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=LastSendV+$total_send_volume,State=2
                where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key";
            }else{//没有送过水，或这次送水与上次超过一天
                $sql=" update user_restmoney set RestMoney=RestMoney-$total_use_money,TotalSendV=TotalSendV+$total_send_volume,RestWater=$total_send_volume,LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=$total_send_volume,State=2,LastSendDate='$date_now',LastSendTime='$now'
                where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key";
            }
            $res=Yii::$app->db->createCommand($sql)->execute();
            if(!$res){
                throw new yii\db\Exception('修改账户失败');
            }

            $transaction->commit();
            return json_encode(['state'=>0]);
        }catch (yii\db\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }


    }
    //扫描水条码后根据条码获取商品信息、减库存、出库记录、送水记录、账户余额
    public function actionGetInfoByCode2(){//备份

        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'未获取到登陆信息']);
        }

        //水条码编号
        $code=Yii::$app->request->get('code');
        $UserId=Yii::$app->request->get('UserId');
        $AgentId=Yii::$app->request->get('AgentId');
        $CustomerType=Yii::$app->request->get('CustomerType');
        if(!$code||!$UserId||!$AgentId||!$CustomerType){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $data=yii\db\ActiveRecord::findBySql("select Id,RestMoney from user_restmoney
        where UserId='$UserId' and AgentId=$AgentId and CustomerType=$CustomerType")->asArray()->one();
        if(!$data){
            return json_encode(['state'=>-1,'msg'=>'账户不存在']);
        }
        if($data['RestMoney'] < -500){
            return json_encode(['state'=>-1,'msg'=>'账户余额不能小于负500']);
        }

        //判断该条码是否扫描过
        $result=yii\db\ActiveRecord::findBySql("select Id from send_water_log where BarCode='$code'")->asArray()->one();
        if($result){
            return json_encode(['state'=>-1,'msg'=>'该条码的水已经扫描过了']);
        }

        $info=yii\db\ActiveRecord::findBySql("
        select wcode_info.Fid,brands.BrandName,goods.name as GoodsName,goods.volume as Volume,
        wcode_info.UsdUserId,wcode_info.Code,goods.brand_id as BrandNo,wcode_info.GoodsId
        from wcode_info
        inner join goods on goods.id=wcode_info.GoodsId
        inner join brands on brands.BrandNo=goods.brand_id
        where wcode_info.Code='$code'
        ")->asArray()->one();
        if($info){

            //验证该服务点是否有该商品
            if(!$info['GoodsId']){
                return json_encode(['state'=>-1,'msg'=>'该条码未注明是何商品']);
            }

            $price=$this->CheckGoods($agent->key,$info['GoodsId']);
            if($price===false){
                return json_encode(['state'=>-1,'msg'=>'该服务店没有该商品']);
            }

            if($info['UsdUserId']){
                return json_encode(['state'=>-1,'msg'=>'该条码使用过了']);
            }
//先注释-----库存逻辑---------------------
            //判断是否有库存
            $stock_data=yii\db\ActiveRecord::findBySql("
            select id,stock,factory_id,goods_id
            from agent_stock
            where agent_id=$agent->key
            and goods_id={$info['GoodsId']}
            ")->asArray()->one();
            if(!$stock_data){
                return json_encode(['state'=>-1,'msg'=>'该商品没有库存']);
            }
            if($stock_data['stock']<=0){
                return json_encode(['state'=>-1,'msg'=>'库存不足']);
            }
//-----------库存逻辑----------------------
            $now=date('Y-m-d H:i:s',time());
            $date_now=date('Y-m-d');//当前日期

            //事物
            $transaction=Yii::$app->db->beginTransaction();
            try{
//先注释-----库存逻辑---------------------
                //添加出库记录
                //获取累计入库总数量、剩余库存数量
                $total_rest=$this->GetTotalAndRestStock($agent->key,$stock_data['goods_id'],$stock_data['factory_id']);
                $total=$total_rest['total'];
                $rest_stock=$total_rest['rest_stock']-1;
                if($rest_stock<0) {
                    throw new yii\db\Exception('库存不足');
                }

                $res=\Yii::$app->db->createCommand(" insert into agent_stock_log
                (agent_id,factory_id,goods_id,action_type,num,rest_stock,total,remark,row_time,bar_code)
                values($agent->key,{$stock_data['factory_id']},{$stock_data['goods_id']},2,1,$rest_stock,$total,2,'$now','$code')")->execute();
                if(!$res){
                    throw new yii\db\Exception('添加出库记录失败');
                }

                //修改库存
                $re=Yii::$app->db->createCommand("update agent_stock set stock=stock-1,update_time='$now' where id={$stock_data['id']}")->execute();
                if(!$re){
                    throw new yii\db\Exception('修改库存失败，请重新扫描');
                }
//------------库存逻辑---------------------

                $account=yii\db\ActiveRecord::findBySql(" select RestMoney,TotalSendV,RestWater,AverageUse,SendWaterTime,LastSendDate
            from user_restmoney
            where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key ")->asArray()->one();

                //添加送水记录
                $res=Yii::$app->db->createCommand(" insert into send_water_log (UserId,CustomerType,AgentId,WaterBrandNo,WaterGoodsId,Volume,Amount,UseMoney,RestMoney,SendTime,Price,State,RowTime,`From`,BarCode)
             values('$UserId',$CustomerType,$agent->key,'{$info['BrandNo']}',{$info['GoodsId']},{$info['Volume']},1,$price,{$account['RestMoney']}-$price,'$now',$price,1,'$now',2,'$code')")->execute();
                if(!$res){
                    throw new yii\db\Exception('保存送水记录失败');
                }

                //修改账户余额、送水量、状态（已配送）
                $AverageUse=$account['AverageUse'];//平均用水量
                $SendWaterTime='近期还没有用水';
                if($AverageUse > 0){
                    //计算预计送水时间
                    //还可以用几天
                    $days=floor(($account['RestWater']+$info['Volume'])/$AverageUse);
                    $SendWaterTime=date("Y-m-d",strtotime("+$days day"));

                }
                //当天或1天内送水，就是一次送水(很多袋)，送水量相加
                $day_after_1='';
                if($account['LastSendDate']){
                    //上传送水日期向后推3天的日期
                    $day_after_1=date("Y-m-d",strtotime("+1 day",strtotime($account['LastSendDate'])));
                }
                if($account['LastSendDate'] && $date_now <= $day_after_1){
                    $sql=" update user_restmoney set RestMoney=RestMoney-$price,TotalSendV=TotalSendV+{$info['Volume']},RestWater=RestWater+{$info['Volume']},LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV=LastSendV+{$info['Volume']},State=2
             where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key";
                }else{
                    $sql=" update user_restmoney set RestMoney=RestMoney-$price,TotalSendV=TotalSendV+{$info['Volume']},RestWater=RestWater+{$info['Volume']},LastActTime='$now',SendWaterTime='$SendWaterTime',LastSendV={$info['Volume']},State=2,LastSendDate='$date_now',LastSendTime='$now'
             where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key";
                }
                $res=Yii::$app->db->createCommand($sql)->execute();
                if(!$res){
                    throw new yii\db\Exception('修改账户失败');
                }

                $transaction->commit();
                return json_encode(['state'=>0,'info'=>$info]);
            }catch (yii\db\Exception $e){
                $transaction->rollBack();
                return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
            }

        }
        return json_encode(['state'=>-1,'msg'=>'未知条码']);

    }

    //ajax送水扫码时获取对应商品数据
    public function actionGetGoodsInfo(){
        //水条码编号
        $code=Yii::$app->request->get('code');
        $UserId=Yii::$app->request->get('UserId');
        if(!$code||!$UserId){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        //判断该条码是否扫描过
        $result=yii\db\ActiveRecord::findBySql("select Id from send_water_log where BarCode='$code'")->asArray()->one();
        if($result){
            return json_encode(['state'=>-1,'msg'=>'该条码的水已经扫描过了']);
        }

        $info=yii\db\ActiveRecord::findBySql("
        select wcode_info.Fid,brands.BrandName,goods.name as GoodsName,goods.volume as Volume,
        wcode_info.UsdUserId,wcode_info.Code,goods.brand_id as BrandNo,wcode_info.GoodsId
        from wcode_info
        inner join goods on goods.id=wcode_info.GoodsId
        inner join brands on brands.BrandNo=goods.brand_id
        where wcode_info.Code='$code'
        ")->asArray()->one();
        if($info) {

            //验证该服务点是否有该商品
            if (!$info['GoodsId']) {
                return json_encode(['state' => -1, 'msg' => '该条码未注明是何商品']);
            }


            if ($info['UsdUserId']) {
                return json_encode(['state' => -1, 'msg' => '该条码使用过了']);
            }
            $user_goods_price=yii\db\ActiveRecord::findBySql("select Id,Price from user_goods_price where UserId='$UserId' and GoodsId={$info['GoodsId']}")->asArray()->one();
            if($user_goods_price) {//不是第一次填写价格
                $info['price']=$user_goods_price['Price'];
            }else{
                $info['price']='';
            }

            return json_encode(['state'=>0,'info'=>$info]);
        }
        return json_encode(['state'=>-1,'msg'=>'未知条码']);

    }

    //修改或填写价格后，ajax 请求保存或修改商品价格
    public function actionSavePrice(){
        $goods_id=Yii::$app->request->get('goods_id');
        $UserId=Yii::$app->request->get('UserId');
        $price=Yii::$app->request->get('price');
        if(!$goods_id||!$UserId||!is_numeric($price)||$price<0){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $user_goods_price=yii\db\ActiveRecord::findBySql("select Id,Price from user_goods_price where UserId='$UserId' and GoodsId=$goods_id")->asArray()->one();
        $now=date('Y-m-d H:i:s');
        $sql='';
        if($user_goods_price) {//不是第一次填写价格
            if($user_goods_price['Price']!=$price){//修改了价格
                $sql="update user_goods_price set Price=$price,UpdateTime='$now' where Id={$user_goods_price['Id']}";
            }
        }else{
            $sql="insert into user_goods_price (`UserId`,`GoodsId`,`Price`,`RowTime`) values('$UserId',$goods_id,$price,'$now')";
        }

        if($sql){
            $re=Yii::$app->db->createCommand($sql)->execute();
            if(!$re){
               return json_encode(['state'=>-1,'msg'=>'失败']);
            }
        }
        return json_encode(['state'=>0]);

    }


    //出、入库时获取累计入库总数量、剩余库存数量
    public function GetTotalAndRestStock($agent_id,$goods_id,$factory_id){
        //总入库数量
        $total=0;
        $data=yii\db\ActiveRecord::findBySql("select MAX(total)as total from agent_stock_log
            where agent_id=$agent_id and goods_id=$goods_id
            and factory_id=$factory_id")->asArray()->one();
        if($data)$total=$data['total'];
        //剩余库存总数
        $rest_stock=0;
        $data2=yii\db\ActiveRecord::findBySql("select stock from agent_stock
            where agent_id=$agent_id  and goods_id=$goods_id
             and factory_id=$factory_id")->asArray()->one();
        if($data2)$rest_stock=$data2['stock'];

        return ['total'=>$total,'rest_stock'=>$rest_stock];
    }

    //创建电子水票账户  已弃用
    public function actionCreateWaterAccount(){
        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        //登陆者信息
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'未获取到登陆信息']);
        }

        //电话
        $tel=Yii::$app->request->post('tel');
        //用户类型
        $CustomerType=Yii::$app->request->post('CustomerType');
        //购水套餐
        $UseType=Yii::$app->request->post('UseType');
        //水商品信息(条码编号)
        $codes_str=Yii::$app->request->post('codes_str');
        $pay_type=Yii::$app->request->post('pay_type');//支付方式 1 现金，2 微信，3 支付宝

        if($pay_type=='')$pay_type=1;//默认现金

        if($tel==''||$CustomerType==''||$codes_str==''||$UseType==''){
            return json_encode(['state'=>-1,'msg'=>'数据不完整']);
        }

        $user_info=yii\db\ActiveRecord::findBySql("select Id from user_info where Tel=$tel")->asArray()->one();
        if(!$user_info){//用户不存在
            return json_encode(['state'=>-1,'msg'=>'用户不存在']);
        }

        //登记时购水套餐里的水费
//        $data=yii\db\ActiveRecord::findBySql("select water_charge from agent_usetype_code where code=$UseType")->asArray()->one();
//        if(!$data){
//            return json_encode(['state'=>-1,'msg'=>'购水套餐不存在']);
//        }
//        $buy_water_money=$data['water_charge'];//登记时购水套餐里的水费

        //根据编号获取商品
        $goods=yii\db\ActiveRecord::findBySql("select BrandNo,GoodsId,Volume from wcode_info where Code in ($codes_str)")->asArray()->all();
        //将相同商品合并
        $goods_data=$this->GetNewArray($goods);

        $UserId=$user_info['Id'];
        $user=yii\db\ActiveRecord::findBySql("select Id from user_restmoney where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key")->asArray()->one();
        $now=date('Y-m-d H:i:s',time()+1);
        $now2=date('Y-m-d H:i:s',time());//先充值
        $transaction=Yii::$app->db->beginTransaction();
        try{
            //判断是否需要创建过电子账户
            if(!$user){//没有电子账户
                //创建电子账户
                $res=Yii::$app->db->createCommand(" insert into user_restmoney (UserId,CustomerType,AgentId,RestMoney,TotalSendV,RestWater,LastActTime,SendWaterTime,AverageUse)
             values ('$UserId',$CustomerType,$agent->key,0,0,0,'$now','没有送水记录',0)")->execute();
                if(!$res){
                    throw new yii\db\Exception('创建电子账户失败');
                }

            }

            //1、修改账户余额、总送水量、预计送水时间
            $account=yii\db\ActiveRecord::findBySql(" select RestMoney,TotalSendV,RestWater,AverageUse,SendWaterTime
            from user_restmoney
            where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key ")->asArray()->one();


//            $SendWaterTime=date('Y-m-d',strtotime('7 day'));//预计送水时间默认往后推7天
            $SendWaterTime='近期还没有用水';
            $total_use_money=0;//本次送水花的钱
            $total_send_volume=0;//本次总的送水量
            foreach($goods_data as $goods){
                $data=$this->CheckGoods($agent->key,$goods['GoodsId']);
                if($data!=false){
                    $total_use_money+=$data*$goods['num'];
                    $total_send_volume+=$goods['Volume']*$goods['num'];

                    //3、送水记录
                    $res=Yii::$app->db->createCommand(" insert into send_water_log (UserId,CustomerType,AgentId,WaterBrandNo,WaterGoodsId,Volume,Amount,UseMoney,RestMoney,SendTime,Price,State,RowTime,`From`)
             values('$UserId',$CustomerType,$agent->key,'{$goods['BrandNo']}',{$goods['GoodsId']},{$goods['Volume']},{$goods['num']},$data*{$goods['num']},{$account['RestMoney']}-$total_use_money,'$now',$data,1,'$now',2)")->execute();
                    if(!$res){
                        throw new yii\db\Exception('保存送水记录失败');
                    }
                }
            }

            if($account['AverageUse']>0){//结合平均用水量，计算送水后能用几天
                if(date('Y-m-d H:i:s',strtotime($account['SendWaterTime']))==$account['SendWaterTime']){
                    $days=floor($total_send_volume/$account['AverageUse']);
                    $SendWaterTime=date('Y-m-d H:i:s',strtotime($account['SendWaterTime'])+24*3600*$days);
                }

            }
            //1、修改账户
            $res=Yii::$app->db->createCommand(" update user_restmoney set RestMoney={$account['RestMoney']}-$total_use_money,TotalSendV={$account['TotalSendV']}+$total_send_volume,RestWater={$account['RestWater']}+$total_send_volume,LastActTime='$now',SendWaterTime='$SendWaterTime'
             where UserId='$UserId' and CustomerType=$CustomerType and AgentId=$agent->key")->execute();
            if(!$res){
                throw new yii\db\Exception('修改账户失败');
            }

//            //2、充值记录
//            $res=Yii::$app->db->createCommand(" insert into user_recharge_log (UserId,CustomerType,AgentId,PayMoney,PayType,RestMoney,RowTime)
//             values('$UserId',$CustomerType,$agent->key,$buy_water_money,$pay_type,$buy_water_money+{$account['RestMoney']},'$now2')")->execute();
//            if(!$res){
//                throw new yii\db\Exception('保存充值记录失败');
//            }



            $transaction->commit();
            return json_encode(['state'=>0]);
        }catch (yii\db\Exception $e){
            $transaction->rollBack();
            return json_encode(['state'=>-1,'msg'=>$e->getMessage()]);
        }


    }

    //验证服务店是否有该商品
    public function CheckGoods($agent_id,$goods_id){
        $goods=yii\db\ActiveRecord::findBySql("select realprice from agent_goods where agent_id=$agent_id and goods_id=$goods_id")->asArray()->one();
        if($goods){
          return $goods['realprice'];
        }
        return false;
    }

    //二维数组去重，并获取重复的数量  已弃用
    public function GetNewArray($arr){

        $temp1=[];
        foreach ($arr as $k=>$v){
            $v=join(',',$v); //降维,也可以用implode,将一维数组转换为用逗号连接的字符串
            $temp1[$k]=$v;
        }
        $temp2=array_unique($temp1); //去掉重复的字符串,也就是重复的一维数组
        $temp3=[];
        foreach ($temp2 as $k => $v){
            $array=explode(',',$v); //再将拆开的数组重新组装
            //下面的索引根据自己的情况进行修改即可
            $temp3[$k]['BrandNo'] =$array[0];
            $temp3[$k]['GoodsId'] =$array[1];
            $temp3[$k]['Volume'] =$array[2];
        }
//        var_dump($temp3);exit;



        foreach($temp3 as &$v){
            $num=0;
            foreach($arr as $v2){
                if($v==$v2){
                    $num++;
                }
            }
            $v['num']=$num;
        }
        return $temp3;
    }

    //酒店登记时，验证二维码编号是否登记过设备(除开已初始化的)
    public function actionCheckCodeNumber(){
        $CodeNumber=Yii::$app->request->get('CodeNumber');
        $data=yii\db\ActiveRecord::findBySql("select DevNo from dev_regist
        where AgentId > 0 and CodeNumber='$CodeNumber'
        and not exists(select 1 from dev_cmd where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)")->asArray()->one();
        if($data){
            return json_encode(['state'=>-1,'msg'=>'该二维码已绑定，请联系太极兵工作人员']);
        }
        return json_encode(['state'=>0]);
    }

    //设备列表，误拍照片，撤回，返回之前状态（已确认的照片不能撤回）
    public function actionGoBack(){
        //验证是否已登陆
        if(!$this->checkAgentLogin()){
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        //设备编号
        $DevNo=Yii::$app->request->get('DevNo');
        if(!$DevNo){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        $data=yii\db\ActiveRecord::findBySql("select ImageState,Image from dev_regist where DevNo='$DevNo'")->asArray()->one();
        if(!$data){
            return json_encode(['state'=>-1,'msg'=>'设备不存在']);
        }
        if($data['ImageState']==2&&$data['Image']){//图片已经通过的不能撤回
            return json_encode(['state'=>-1,'msg'=>'图片已经通过审核，不能撤回']);
        }
        //将状态还原
        if($data['Image']){
            $sql=" update dev_regist set ImageState=2,TempImage='' where DevNo='$DevNo' ";
        }else{
            $sql=" update dev_regist set ImageState=0,TempImage='' where DevNo='$DevNo' ";
        }
        $re=Yii::$app->db->createCommand($sql)->execute();
        if($re){
            return json_encode(['state'=>0]);
        }
        return json_encode(['state'=>-1,'msg'=>'失败，请重新操作']);

    }

    //验证是否是电话白名单，且登记数量是否达到设置的上限
    public function CheckWhiteList($agent_id,$tel){
        $data=yii\db\ActiveRecord::findBySql("select max,registered_number from tel_white_list where agent_id=$agent_id and tel='$tel' and max > registered_number")->asArray()->one();
        if($data){//该服务中心有设置该电话为白名单，且登记数量没有达到上限
            return true;
        }
        return false;
    }

    //库存管理
    public function actionStockManage(){
        if(!$this->checkAgentLogin()){
            //未登录
            yii::$app->session->set("last_url","/stock/manage");
            return $this->redirect(["/agent/login-page"]);
        }
        $agent=Yii::$app->session->get("agent_user");
        $stock_datas='';
        if($agent&&property_exists($agent,'key')){
            $stock_datas=yii\db\ActiveRecord::findBySql("
            select brands.BrandName,goods.name as GoodsName,
            agent_stock.stock,goods_image.goods_image1
            from agent_stock
            inner join goods on goods.id=agent_stock.goods_id
            inner join goods_image on goods.id=goods_image.goods_id
            inner join brands on brands.BrandNo=goods.brand_id
            where agent_stock.agent_id=$agent->key order by stock asc
            ")->asArray()->all();
        }
        return $this->renderPartial('stock-manage',['stock_datas'=>json_encode($stock_datas)]);
    }

    //登记时选择库存里的设备
    public function actionStockDev(){
        if(!$this->checkAgentLogin()){
            //未登录
            return json_encode(['state'=>-1,'msg'=>'请先登陆']);
        }
        $agent=Yii::$app->session->get("agent_user");
        if(!$agent||!property_exists($agent,'key')){
            return json_encode(['state'=>-1,'msg'=>'没有获取到登陆信息']);
        }
            $stock_datas=yii\db\ActiveRecord::findBySql("
            select agent_stock.id as stock_id,brands.BrandName,
            goods.name as GoodsName,agent_stock.stock,
            brands.BrandNo as brand_id,goods.id as goods_id,goods_image.goods_image1
            from agent_stock
            inner join goods on goods.id=agent_stock.goods_id
            inner join goods_image on goods.id=goods_image.goods_id
            inner join brands on brands.BrandNo=goods.brand_id
            where agent_stock.agent_id=$agent->key and (goods.category_id=2 or goods.category_id=18) and agent_stock.stock > 0")->asArray()->all();
        if(!$stock_datas){
            return json_encode(['state'=>-1,'msg'=>'没有可登记的设备']);
        }

        return json_encode(['state'=>0,'datas'=>$stock_datas]);
    }

}