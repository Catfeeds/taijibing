<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/11/2/002
 * Time: 9:44
 */

namespace app\controllers;

require_once "../wxpay/lib/WxPay.Api.php";
require_once "../wxpay/lib/WxPay.Data.php";
require_once "../wxpay/example/WxPay.JsApiPay.php";
require_once '../wxpay/example/log.php';
require_once '../wxpay/lib/WxPay.Notify.php';
require_once '../wxpay/example/notify.php';


use yii\db\ActiveRecord;

header('Access-Control-Allow-Origin:http://manage.taijibing.cn');   // 指定允许其他域名访问（后台退款）

class WeiXinPayController extends WxController
{
    public $enableCsrfValidation = false;
    //容量对应的价格
    public $volume_price=[
        '0.4'=>0.01,
        '1'=>2,
        '2'=>3,
        '5'=>6,
        '7.5'=>10,
    ];
    public function beforeAction($action)
    {
        //获取openid后，微信原路径返回时会截取掉参数，先保存到seesion
        $datas=\Yii::$app->request->get()?\Yii::$app->request->get():\Yii::$app->request->post();
        if($datas){
            \Yii::$app->session->set('datas',$datas);
        }

        $this->checkOpenid();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    //购水页面
    public function actionBuyWater(){
        if(!$this->is_weixin()){
          return $this->renderPartial('user_message',['msg'=>'请用微信扫码']);
        }
        //接收二维码的参数（产品型号（XXX-XXXX）-工厂代码（X-XX）-产品批次号（X-XX）-流水号（XXXXX））
        $CodeNumber=\Yii::$app->request->get('info')?\Yii::$app->request->get('info'):\Yii::$app->session->get('datas')['info'];//二维码信息

        //判断是用户购水，还是酒店登记绑定设备
        $hotel=\Yii::$app->request->get('hotel')?\Yii::$app->request->get('hotel'):\Yii::$app->session->get('datas')['hotel'];
        //酒店继续登记，上次生成的编号
        $DevNo=\Yii::$app->request->get('DevNo')?\Yii::$app->request->get('DevNo'):\Yii::$app->session->get('datas')['DevNo'];

        //用户购水
        if(!$hotel||$hotel!='YES'){//用户购水

            if(!$CodeNumber){
                return $this->renderPartial('user_message',['msg'=>'扫码失败，请重新扫码']);
            }

            $data=ActiveRecord::findBySql("select DevNo from dev_regist where CodeNumber='$CodeNumber'
and IsActive=1 and AgentId > 0
and not exists (select 1 from dev_cmd
        where CmdType=4 and State=1 and DevNo=dev_regist.DevNo)
")->asArray()->one();
            if(!$data){
                //提示错误，该二维码有误
                return $this->renderPartial('user_message',['msg'=>'该二维码有误，请联系工作人员']);

            }
            $DevNo=$data['DevNo'];
            //判断对应设备是否连网
            $connect=ActiveRecord::findBySql("select LastConnectTime,LastConnectDate from dev_status where DevNo='$DevNo'")->asArray()->one();
            if(!$connect){
                //没有连网
                return $this->renderPartial('user_message',['msg'=>'该设备没有连网，请联系工作人员']);
            }
            $last_connect_time=$connect['LastConnectDate'].' '.$connect['LastConnectTime'];
            $last_connect_time=strtotime($last_connect_time);
            if((time()-$last_connect_time)>180){//上次连网时间超过了3分钟
                //没有连网
                return $this->renderPartial('user_message',['msg'=>'该设备没有连网，请联系工作人员']);
            }

            //有连网
            return $this->renderPartial('buy_water',['CodeNumber'=>$CodeNumber,'DevNo'=>$DevNo]);
        }

        if(!$CodeNumber){
            return $this->renderPartial('message',['msg'=>'扫码失败，请重新扫码']);
        }

        //酒店登记绑定(判断该二维码是否已经绑定过了)
        $data=ActiveRecord::findBySql("select DevNo from dev_regist where CodeNumber='$CodeNumber'")->asArray()->one();
        if($data){//该二维码绑定了设备
            //提示
            return $this->renderPartial('message',['msg'=>'该二维码绑定过设备了，请联系太极兵工作人员']);
        }


        if($DevNo){//酒店继续登记
            //跳回登记第二个页面
            header("Location: /index.php/agent/register-dev-info?DevNo=$DevNo");
            exit;

        }

           //跳回登记第一个页面
            header("Location: /index.php/agent/register");
            exit;



    }


    public function actionPayMoney(){
        if(!$this->is_weixin()){
            return $this->renderPartial('user_message',['msg'=>'请用微信支付']);
        }
        $openId = \Yii::$app->session->get('openid');
        $now=date('Y-m-d H:i:s');

        $goods_info=\Yii::$app->session->get('datas');
        //是否是商城购买支付
        if(array_key_exists('tag',$goods_info)&&$goods_info['tag']==1){//商城购买支付

            if(!array_key_exists('AddressId',$goods_info)||!array_key_exists('GoodsId',$goods_info)
                ||!array_key_exists('Amount',$goods_info)||!array_key_exists('agent_id',$goods_info)
                ||!array_key_exists('SendType',$goods_info)||!array_key_exists('SendTime',$goods_info)
                ||!array_key_exists('Message',$goods_info)){
                return json_encode(['state'=>-1,'msg'=>'参数错误']);
            }
            //商品信息
            $data=ActiveRecord::findBySql("
            select goods.name,goods.volume,agent_goods.realprice,
            goods.unit,brands.BrandName,goods_image.goods_image1
            from goods
            inner join agent_goods on agent_goods.goods_id=goods.id
            inner join brands on brands.BrandNo=goods.brand_id
            INNER JOIN goods_image on goods_image.goods_id=goods.id
            where goods.id={$goods_info['GoodsId']}
            and agent_goods.agent_id={$goods_info['agent_id']}
            ")->asArray()->one();
            //地址信息
            $address=ActiveRecord::findBySql("
            select shop_user_address_info.UserName,shop_user_address_info.Tel,
            shop_user_address_info.Province,shop_user_address_info.City,
            shop_user_address_info.Area,shop_user_address_info.Address,
            shop_user.Tel as LoginTel
            from shop_user_address_info
            inner join shop_user on shop_user.Id=shop_user_address_info.ShopUserId
            where shop_user_address_info.Id={$goods_info['AddressId']}
            ")->asArray()->one();
            if(!$data||!$address){
                return json_encode(['state'=>-1,'msg'=>'没有获取到商品信息或地址信息']);
            }

            $goods_name=$data['name'];
            $pay_money=$data['realprice']*$goods_info['Amount'];
            $out_trade_no=date("YmdHis");

            //保存订单
            $sql="insert into shop_user_order(`OutTradeNo`,`OpenId`,`GoodsId`,`LoginTel`,`UserName`,`Tel`,`Province`,`City`,`Area`,
            `Address`,`BrandName`,`GoodsName`,`Volume`,`Amount`,`PayMoney`,`AgentId`,`RowTime`,`PayType`,`PayState`,`OrderState`,`Unit`,`ImageUrl`,`SendType`,`SendTime`,`Message`)
              VALUES ('$out_trade_no','$openId',{$goods_info['GoodsId']},'{$address['LoginTel']}','{$address['UserName']}','{$address['Tel']}','{$address['Province']}','{$address['City']}','{$address['Area']}',
              '{$address['Address']}','{$data['BrandName']}','{$data['name']}',{$data['volume']},{$goods_info['Amount']},$pay_money,{$goods_info['agent_id']},'$now',1,0,0,'{$data['unit']}','{$data['goods_image1']}',
              {$goods_info['SendType']},'{$goods_info['SendTime']}','{$goods_info['Message']}')";
            $re=\Yii::$app->db->createCommand($sql)->execute();
            if(!$re){
                return json_encode(['state'=>-1,'msg'=>'生成订单失败，请重试']);
            }

        }else{//酒店买水支付
            if(!array_key_exists('volume',$goods_info)||!array_key_exists('price',$goods_info)
            ||!array_key_exists('DevNo',$goods_info)||!array_key_exists('CodeNumber',$goods_info)){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
            }
            $volume=$goods_info['volume'];//容量
            $price=$goods_info['price'];//价格
            $DevNo=$goods_info['DevNo'];//设备编号
            $CodeNumber=$goods_info['CodeNumber'];//二维码编号
            //获取商品名称
            $goods_id=0;
            $brand_id='';
            $goods_name='一次性包装水';
            $data=ActiveRecord::findBySql("select GoodsId from dev_water_scan where DevNo='$DevNo' order by RowTime desc limit 1")->asArray()->one();
            if($data){
                $goods_id=$data['GoodsId'];
                $goods=ActiveRecord::findBySql("select `name`,brand_id from goods where id=$goods_id")->asArray()->one();
                if($goods){
                    $goods_name=$goods['name'].$goods_name;
                    $brand_id=$goods['brand_id'];
                }
            }

            //订单号
            $out_trade_no=$DevNo.date("YmdHis");
            //付款金额
            $pay_money=$this->volume_price[$volume];

            //保存订单
            $sql="insert into hotel_user_order(`DevNo`,`CodeNumber`,`OutTradeNo`,`OpenId`,`GoodsId`,`BrandId`,`Volume`,`PayMoney`,`RowTime`,`PayType`,`ActTime`,`State`,`OrderState`)
              VALUES ('$DevNo','$CodeNumber','$out_trade_no','$openId',$goods_id,'$brand_id',$volume,$pay_money,'$now',1,'$now',0,0)";
            $re=\Yii::$app->db->createCommand($sql)->execute();
            if(!$re){
                return json_encode(['state'=>-1,'msg'=>'生成订单失败，请重新购买']);
            }

        }


        //初始化日志
        $logHandler= new \CLogFileHandler("../wxpay/logs/".date('Y-m-d').'.log');
        $log = \Log::Init($logHandler, 15);

        //①、获取用户openid
        $tools = new \JsApiPay();
        //$openId = $tools->GetOpenid();

        //②、统一下单
        $input = new \WxPayUnifiedOrder();
        $input->SetBody($goods_name);
        $input->SetAttach("goods");
        $input->SetOut_trade_no($out_trade_no);
        $input->SetTotal_fee($pay_money*100);//单位为分，要乘以100
        $input->SetTime_start(date("YmdHis"));
        $input->SetTime_expire(date("YmdHis", time() + 600));
        $input->SetGoods_tag("drink_water");
        $input->SetNotify_url("http://wx.taijibing.cn/index.php/wei-xin-pay/notify");
        $input->SetTrade_type("JSAPI");
        $input->SetOpenid($openId);
        $order = \WxPayApi::unifiedOrder($input);
        $jsApiParameters = $tools->GetJsApiParameters($order);

        //获取共享收货地址js函数参数
        $editAddress = $tools->GetEditAddressParameters();

        return json_encode([
            'state'=>0,
            'jsApiParameters'=>$jsApiParameters,
            'editAddress'=>$editAddress,
            ]);
    }

    /**
     * notify_url接收页面
     */
	 public function actionNotify(){

        //初始化日志
         $logHandler= new \CLogFileHandler("../wxpay/logs/".date('Y-m-d').'.log');
         $log = \Log::Init($logHandler, 15);
         \Log::DEBUG("begin notify");
        //返回微信结果
         $resXml='';

         $postStr = file_get_contents("php://input");
         $postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);

         if ($postObj === false) {
             die('parse xml error');
         }
         if ($postObj->return_code != 'SUCCESS') {
             die("error_code: ".$postObj->err_code.",msg: ".$postObj->return_msg);
         }
         $key = \WxPayConfig::KEY;

         //验证签名
         $arr = (array)$postObj;
         unset($arr['sign']);
         if($this->getSign($arr,$key) != $postObj->sign) {
             die("签名错误");
         }else{

             // 通知微信.异步确认成功.必写.不然会一直通知后台.八次之后就认为交易失败了.
             $resXml = "<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>";

             //查看是否有该订单
             $data=ActiveRecord::findBySql("select Id,DevNo,Volume,PayMoney from hotel_user_order where OutTradeNo='$postObj->out_trade_no' and State=0 ")->asArray()->one();
             if($data){//酒店支付
                if($data['PayMoney']*100==$postObj->total_fee){//支付金额是否一致
                    $now=date('Y-m-d H:i:s',time());
                    //保存微信官方生成的订单流水号，修改支付状态、订单状态、操作时间
                    $sql="update hotel_user_order set TransactionId='$postObj->transaction_id',State=1,OrderState=1,ActTime='$now' where Id={$data['Id']}";
                    $re=\Yii::$app->db->createCommand($sql)->execute();

                    //下发可使用水量命令
                    $ExpiredTime=date('Y-m-d H:i:s',time()+300);
                    $WaterExpiredTime=date('Y-m-d H:i:s',time()+24*300);
                    $sql2="insert into dev_cmd (DevNo,StartTime,ExpiredTime,CmdType,Cmd,RowTime)
                        VALUES ('{$data['DevNo']}','$now','$ExpiredTime',9,'1,1,{$data['Volume']},$WaterExpiredTime','$now')";
                    $re2=\Yii::$app->db->createCommand($sql2)->execute();


                }
             }else{//商城支付
                 $order=ActiveRecord::findBySql("select Id,PayMoney from shop_user_order where OutTradeNo='$postObj->out_trade_no' and PayState=0 ")->asArray()->one();
                 if($order){
                     if($order['PayMoney']*100==$postObj->total_fee){//支付金额是否一致
                         $now=date('Y-m-d H:i:s');
                         //保存微信官方生成的订单流水号，修改支付状态、订单状态、支付时间
                         $sql="update hotel_user_order set TransactionId='$postObj->transaction_id',PayTime='$now',PayState=1,OrderState=1 where Id={$order['Id']}";
                         $re=\Yii::$app->db->createCommand($sql)->execute();
                     }
                 }

             }

         }
         return $resXml;

     }


    /**
     * 微信退款
     * @param  string   $order_id   订单ID
     * @return 成功时返回(array类型)，其他抛异常
     */
    public function actionReturnMoney(){
        //订单号
        $out_trade_no=\Yii::$app->request->get('out_trade_no')?\Yii::$app->request->get('out_trade_no'):\Yii::$app->session->get('datas')['out_trade_no'];
        //微信官方生成的订单流水号
        $transaction_id=\Yii::$app->request->get('transaction_id')?\Yii::$app->request->get('transaction_id'):\Yii::$app->session->get('datas')['transaction_id'];

        if(!$out_trade_no||!$transaction_id){
            return json_encode(['state'=>-1,'msg'=>'参数错误']);
        }
        //查询该订单是否可以退款
        $res=$this->QueryOrder($out_trade_no);
        if($res['state']==-1){
            return json_encode(['state'=>-1,'msg'=>$res['msg']]);
        }


        //退款金额
        //酒店订单
        $data=ActiveRecord::findBySql("select DevNo,PayMoney,Volume from hotel_user_order where OutTradeNo='$out_trade_no' and TransactionId='$transaction_id' and State=1")->asArray()->one();
        //商城订单
        $data2=ActiveRecord::findBySql("select Id,PayMoney from shop_user_order where OutTradeNo='$out_trade_no' and TransactionId='$transaction_id' and PayState=1")->asArray()->one();
        if(!$data&&!$data2){
            return json_encode(['state'=>-1,'msg'=>'没有该订单']);
        }
        if($data&&!$data2){//酒店订单 退款
            $total_fee=$data['PayMoney']*100;//微信单位是分
            //生成退款单号
            $out_refund_no=$data['DevNo'].date('YmdHis');
        }elseif($data2&&!$data){//商城订单 退款
            $total_fee=$data2['PayMoney']*100;//微信单位是分
            //生成退款单号
            $out_refund_no=date('YmdHis');
        }



        //微信退款
        $result = $this->wxRefund($out_trade_no,$transaction_id,$total_fee,$out_refund_no);
        $now=date('Y-m-d H:i:s',time());
        if(($result['return_code']=='SUCCESS') && ($result['result_code']=='SUCCESS')){

            if($data&&!$data2){//酒店订单 退款
                //退款成功,修改订单状态、操作时间
                $sql="update hotel_user_order set OutRefundNo='{$result['out_refund_no']}', OrderState=3,ActTime='$now' where TransactionId='{$result['transaction_id']}' and OutTradeNo='{$result['out_trade_no']}'";
                \Yii::$app->db->createCommand($sql)->execute();

                //将该设备下发的可用水量命令设置无效
                $sql2="update dev_cmd set ExpiredTime='$now' where DevNo='{$data['DevNo']}' and CmdType=9 and Cmd = '1,{$data['Volume']}' and State=0 and ExpiredTime > '$now'";
                \Yii::$app->db->createCommand($sql2)->execute();

            }elseif($data2&&!$data){//商城订单 退款
                //退款成功,修改订单状态、操作时间
                $sql="update shop_user_order set OutRefundNo='{$result['out_refund_no']}',OrderState=2,ActTime='$now' where TransactionId='{$result['transaction_id']}' and OutTradeNo='{$result['out_trade_no']}'";
                \Yii::$app->db->createCommand($sql)->execute();
            }

            $data=json_encode(['state'=>0]);
        }else if(($result['return_code']=='FAIL') || ($result['result_code']=='FAIL')){

            if($data&&!$data2) {//酒店订单 退款
                //退款失败,修改订单状态、操作时间
                $sql = "update hotel_user_order set OrderState=4,ActTime='$now' where TransactionId='$transaction_id' and OutTradeNo='$out_trade_no'";
                \Yii::$app->db->createCommand($sql)->execute();
            }elseif($data2&&!$data){//商城订单 退款
                //退款成功,修改订单状态、操作时间
                $sql="update shop_user_order set OrderState=3,ActTime='$now' where TransactionId='{$result['transaction_id']}' and OutTradeNo='{$result['out_trade_no']}'";
                \Yii::$app->db->createCommand($sql)->execute();
            }
            //原因
            $reason = (empty($result['err_code_des'])?$result['return_msg']:$result['err_code_des']);
            $data=json_encode(['state'=>-1,'msg'=>$reason]);
        }else{
            //失败
            $data=json_encode(['state'=>-1,'msg'=>'失败,请重新操作']);
        }

        return $data;
    }


    function wxRefund($out_trade_no,$transaction_id,$total_fee,$out_refund_no){
        //查询订单,根据订单里边的数据进行退款
//        $order = M('order')->where(array('id'=>$order_id,'is_refund'=>2,'order_status'=>1))->find();
        $merchid = \WxPayConfig::MCHID;

//        if(!$order) return false;

        $input = new \WxPayRefund();
        $input->SetOut_trade_no($out_trade_no);         //自己的订单号
        $input->SetTransaction_id($transaction_id);     //微信官方生成的订单流水号，在支付成功中有返回
        $input->SetOut_refund_no($out_refund_no);       //退款单号
        $input->SetTotal_fee($total_fee);               //订单标价金额，单位为分
        $input->SetRefund_fee($total_fee);              //退款总金额，订单总金额，单位为分，只能为整数
        $input->SetOp_user_id($merchid);

        $result = \WxPayApi::refund($input); //退款操作

        // 这句file_put_contents是用来查看服务器返回的退款结果 测试完可以删除了
        //file_put_contents(APP_ROOT.'/Api/wxpay/logs/log3.txt',arrayToXml($result),FILE_APPEND);
        return $result;
    }

    //查询订单
    public function QueryOrder($tradeId){

        if(isset($tradeId) && $tradeId != "")
        {
            $input = new \WxPayOrderQuery();
            $input->SetOut_trade_no($tradeId); // 设置好要查询的订单
            $order = \WxPayApi::orderQuery($input); // 进行查询
            if($order['err_code_des'] =="order not exist"){
                // 订单不存在
                return ['state'=>-1,'msg'=>'订单不存在'];
            }else{
                $money = $order['total_fee']; //所付款数,单位分
                if($order['trade_state'] =="SUCCESS"){
                    //支付成功
                    return ['state'=>0,'msg'=>'支付成功'];
                }else if($order['trade_state'] =="REFUND"){
                    //已退款
                    return ['state'=>-1,'msg'=>'该订单已退款'];
                }else if($order['trade_state'] =="NOTPAY"){
                    //用户还没支付
                    return ['state'=>-1,'msg'=>'用户还没支付'];
                }else if($order['trade_state'] =="CLOSED"){
                    //订单关闭
                    return ['state'=>-1,'msg'=>'订单关闭'];
                }else if($order['trade_state'] =="REVOKED"){
                    //已撤销（刷卡支付）
                    return ['state'=>-1,'msg'=>'订单已撤销'];
                }else if($order['trade_state'] =="USERPAYING"){
                    //用户支付中
                    return ['state'=>-1,'msg'=>'用户支付中'];
                }else if($order['trade_state'] =="PAYERROR"){
                    //支付失败(其他原因，例如银行返回失败)
                    return ['state'=>-1,'msg'=>'支付失败'];
                }
            }

        }
        return ['state'=>-1,'msg'=>'没有订单号'];
    }


    public static function getSign($params, $key){
        ksort($params, SORT_STRING);
        $unSignParaString = self::formatQueryParaMap($params, false);
        $signStr = strtoupper(md5($unSignParaString . "&key=" . $key));
        return $signStr;
    }

    protected static function formatQueryParaMap($paraMap, $urlEncode = false){
        $buff = "";
        ksort($paraMap);
        foreach ($paraMap as $k => $v){
            if (null != $v && "null" != $v) {
                if ($urlEncode) {
                    $v = urlencode($v);
                }
                $buff .= $k . "=" . $v . "&";
            }
        }
        $reqPar = '';
        if (strlen($buff)>0) {
            $reqPar = substr($buff, 0, strlen($buff) - 1);
        }
        return $reqPar;
    }

}